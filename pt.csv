Path,oldFileContent,currentFileContent
tf_unet/layers.py,"Module(body=[Expr(value=Constant(value='\nCreated on Aug 19, 2016\n\nauthor: jakeret\n', kind=None)), ImportFrom(module='__future__', names=[alias(name='print_function', asname=None), alias(name='division', asname=None), alias(name='absolute_import', asname=None), alias(name='unicode_literals', asname=None)], level=0), Import(names=[alias(name='tensorflow', asname='tf')]), FunctionDef(name='weight_variable', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None), arg(arg='stddev', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0.1, kind=None)]), body=[Assign(targets=[Name(id='initial', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='truncated_normal', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[keyword(arg='stddev', value=Name(id='stddev', ctx=Load()))]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='initial', ctx=Load())], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='weight_variable_devonc', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None), arg(arg='stddev', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0.1, kind=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='truncated_normal', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[keyword(arg='stddev', value=Name(id='stddev', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='bias_variable', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='initial', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.1, kind=None)], keywords=[keyword(arg='shape', value=Name(id='shape', ctx=Load()))]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='initial', ctx=Load())], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='conv2d', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='W', annotation=None, type_comment=None), arg(arg='keep_prob_', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='conv_2d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='conv2d', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='W', ctx=Load())], keywords=[keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='dropout', ctx=Load()), args=[Name(id='conv_2d', ctx=Load()), Name(id='keep_prob_', ctx=Load())], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='deconv2d', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='W', annotation=None, type_comment=None), arg(arg='stride', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='x_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), op=Mult(), right=Constant(value=2, kind=None)), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), op=Mult(), right=Constant(value=2, kind=None)), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=3, kind=None)), ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='conv2d_transpose', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='W', ctx=Load()), Name(id='output_shape', ctx=Load())], keywords=[keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Name(id='stride', ctx=Load()), Name(id='stride', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='max_pool', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='n', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='max_pool', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='ksize', value=List(elts=[Constant(value=1, kind=None), Name(id='n', ctx=Load()), Name(id='n', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Name(id='n', ctx=Load()), Name(id='n', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='crop_and_concat', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=None, type_comment=None), arg(arg='x2', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='x1_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x1', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='x2_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x2', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='offsets', ctx=Store())], value=List(elts=[Constant(value=0, kind=None), BinOp(left=BinOp(left=Subscript(value=Name(id='x1_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load())), op=FloorDiv(), right=Constant(value=2, kind=None)), BinOp(left=BinOp(left=Subscript(value=Name(id='x1_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load())), op=FloorDiv(), right=Constant(value=2, kind=None)), Constant(value=0, kind=None)], ctx=Load()), type_comment=None), Assign(targets=[Name(id='size', ctx=Store())], value=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1, kind=None))], ctx=Load()), type_comment=None), Assign(targets=[Name(id='x1_crop', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='slice', ctx=Load()), args=[Name(id='x1', ctx=Load()), Name(id='offsets', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='x1_crop', ctx=Load()), Name(id='x2', ctx=Load())], ctx=Load()), Constant(value=3, kind=None)], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='pixel_wise_softmax', args=arguments(posonlyargs=[], args=[arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='exponential_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='evidence', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reverse', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), List(elts=[Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value=True, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='div', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Name(id='evidence', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='pixel_wise_softmax', kind=None))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='pixel_wise_softmax_2', args=arguments(posonlyargs=[], args=[arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='exponential_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='sum_exp', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Constant(value=3, kind=None)], keywords=[keyword(arg='keepdims', value=Constant(value=True, kind=None))]), type_comment=None), Assign(targets=[Name(id='tensor_sum_exp', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='sum_exp', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None), Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=3, kind=None)), ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='div', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Name(id='tensor_sum_exp', ctx=Load())], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='cross_entropy', args=arguments(posonlyargs=[], args=[arg(arg='y_', annotation=None, type_comment=None), arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[BinOp(left=Name(id='y_', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='clip_by_value', ctx=Load()), args=[Name(id='output_map', ctx=Load()), Constant(value=1e-10, kind=None), Constant(value=1.0, kind=None)], keywords=[])], keywords=[]))], keywords=[keyword(arg='name', value=Constant(value='cross_entropy', kind=None))])))], decorator_list=[], returns=None, type_comment=None)], type_ignores=[])","Module(body=[Expr(value=Constant(value='\nCreated on Aug 19, 2016\n\nauthor: jakeret\n', kind=None)), ImportFrom(module='__future__', names=[alias(name='print_function', asname=None), alias(name='division', asname=None), alias(name='absolute_import', asname=None), alias(name='unicode_literals', asname=None)], level=0), Import(names=[alias(name='tensorflow', asname='tf')]), FunctionDef(name='weight_variable', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None), arg(arg='stddev', annotation=None, type_comment=None), arg(arg='name', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0.1, kind=None), Constant(value='weight', kind=None)]), body=[Assign(targets=[Name(id='initial', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='truncated_normal', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[keyword(arg='stddev', value=Name(id='stddev', ctx=Load()))]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='initial', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='weight_variable_devonc', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None), arg(arg='stddev', annotation=None, type_comment=None), arg(arg='name', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0.1, kind=None), Constant(value='weight_devonc', kind=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='truncated_normal', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[keyword(arg='stddev', value=Name(id='stddev', ctx=Load()))])], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='bias_variable', args=arguments(posonlyargs=[], args=[arg(arg='shape', annotation=None, type_comment=None), arg(arg='name', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value='bias', kind=None)]), body=[Assign(targets=[Name(id='initial', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.1, kind=None)], keywords=[keyword(arg='shape', value=Name(id='shape', ctx=Load()))]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='initial', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='conv2d', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='W', annotation=None, type_comment=None), arg(arg='keep_prob_', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='conv_2d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='conv2d', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='W', ctx=Load())], keywords=[keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='dropout', ctx=Load()), args=[Name(id='conv_2d', ctx=Load()), Name(id='keep_prob_', ctx=Load())], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='deconv2d', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='W', annotation=None, type_comment=None), arg(arg='stride', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='x_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), op=Mult(), right=Constant(value=2, kind=None)), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), op=Mult(), right=Constant(value=2, kind=None)), BinOp(left=Subscript(value=Name(id='x_shape', ctx=Load()), slice=Index(value=Constant(value=3, kind=None)), ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='conv2d_transpose', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='W', ctx=Load()), Name(id='output_shape', ctx=Load())], keywords=[keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Name(id='stride', ctx=Load()), Name(id='stride', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='max_pool', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='n', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='max_pool', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='ksize', value=List(elts=[Constant(value=1, kind=None), Name(id='n', ctx=Load()), Name(id='n', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='strides', value=List(elts=[Constant(value=1, kind=None), Name(id='n', ctx=Load()), Name(id='n', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())), keyword(arg='padding', value=Constant(value='VALID', kind=None))]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='crop_and_concat', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=None, type_comment=None), arg(arg='x2', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='crop_and_concat', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='x1_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x1', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='x2_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x2', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='offsets', ctx=Store())], value=List(elts=[Constant(value=0, kind=None), BinOp(left=BinOp(left=Subscript(value=Name(id='x1_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load())), op=FloorDiv(), right=Constant(value=2, kind=None)), BinOp(left=BinOp(left=Subscript(value=Name(id='x1_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load())), op=FloorDiv(), right=Constant(value=2, kind=None)), Constant(value=0, kind=None)], ctx=Load()), type_comment=None), Assign(targets=[Name(id='size', ctx=Store())], value=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), Subscript(value=Name(id='x2_shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1, kind=None))], ctx=Load()), type_comment=None), Assign(targets=[Name(id='x1_crop', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='slice', ctx=Load()), args=[Name(id='x1', ctx=Load()), Name(id='offsets', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='x1_crop', ctx=Load()), Name(id='x2', ctx=Load())], ctx=Load()), Constant(value=3, kind=None)], keywords=[]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='pixel_wise_softmax', args=arguments(posonlyargs=[], args=[arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='pixel_wise_softmax', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='exponential_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='evidence', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reverse', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), List(elts=[Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value=True, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='div', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Name(id='evidence', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='pixel_wise_softmax', kind=None))]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='pixel_wise_softmax_2', args=arguments(posonlyargs=[], args=[arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='pixel_wise_softmax_2', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='exponential_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='sum_exp', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Constant(value=3, kind=None)], keywords=[keyword(arg='keepdims', value=Constant(value=True, kind=None))]), type_comment=None), Assign(targets=[Name(id='tensor_sum_exp', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='sum_exp', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=1, kind=None), Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='output_map', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=3, kind=None)), ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='div', ctx=Load()), args=[Name(id='exponential_map', ctx=Load()), Name(id='tensor_sum_exp', ctx=Load())], keywords=[]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='cross_entropy', args=arguments(posonlyargs=[], args=[arg(arg='y_', annotation=None, type_comment=None), arg(arg='output_map', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[BinOp(left=Name(id='y_', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='clip_by_value', ctx=Load()), args=[Name(id='output_map', ctx=Load()), Constant(value=1e-10, kind=None), Constant(value=1.0, kind=None)], keywords=[])], keywords=[]))], keywords=[keyword(arg='name', value=Constant(value='cross_entropy', kind=None))])))], decorator_list=[], returns=None, type_comment=None)], type_ignores=[])"
tf_unet/unet.py,"Module(body=[Expr(value=Constant(value='\nCreated on Jul 28, 2016\n\nauthor: jakeret\n', kind=None)), ImportFrom(module='__future__', names=[alias(name='print_function', asname=None), alias(name='division', asname=None), alias(name='absolute_import', asname=None), alias(name='unicode_literals', asname=None)], level=0), Import(names=[alias(name='os', asname=None)]), Import(names=[alias(name='shutil', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), ImportFrom(module='tf_unet', names=[alias(name='util', asname=None)], level=0), ImportFrom(module='tf_unet.layers', names=[alias(name='weight_variable', asname=None), alias(name='weight_variable_devonc', asname=None), alias(name='bias_variable', asname=None), alias(name='conv2d', asname=None), alias(name='deconv2d', asname=None), alias(name='max_pool', asname=None), alias(name='crop_and_concat', asname=None), alias(name='pixel_wise_softmax_2', asname=None), alias(name='cross_entropy', asname=None)], level=0), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='basicConfig', ctx=Load()), args=[], keywords=[keyword(arg='level', value=Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())), keyword(arg='format', value=Constant(value='%(asctime)s %(message)s', kind=None))])), FunctionDef(name='create_conv_net', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='keep_prob', annotation=None, type_comment=None), arg(arg='channels', annotation=None, type_comment=None), arg(arg='n_class', annotation=None, type_comment=None), arg(arg='layers', annotation=None, type_comment=None), arg(arg='features_root', annotation=None, type_comment=None), arg(arg='filter_size', annotation=None, type_comment=None), arg(arg='pool_size', annotation=None, type_comment=None), arg(arg='summaries', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=3, kind=None), Constant(value=16, kind=None), Constant(value=3, kind=None), Constant(value=2, kind=None), Constant(value=True, kind=None)]), body=[Expr(value=Constant(value='\n    Creates a new convolutional unet for the given parametrization.\n\n    :param x: input tensor, shape [?,nx,ny,channels]\n    :param keep_prob: dropout probability tensor\n    :param channels: number of channels in the input image\n    :param n_class: number of output labels\n    :param layers: number of layers in the net\n    :param features_root: number of features in the first layer\n    :param filter_size: size of the convolution filter\n    :param pool_size: size of the max pooling operation\n    :param summaries: Flag if summaries should be created\n    ', kind=None)), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Layers {layers}, features {features}, filter size {filter_size}x{filter_size}, pool size: {pool_size}x{pool_size}', kind=None), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='layers', value=Name(id='layers', ctx=Load())), keyword(arg='features', value=Name(id='features_root', ctx=Load())), keyword(arg='filter_size', value=Name(id='filter_size', ctx=Load())), keyword(arg='pool_size', value=Name(id='pool_size', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='nx', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='ny', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='x_image', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='x', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='nx', ctx=Load()), Name(id='ny', ctx=Load()), Name(id='channels', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Name(id='x_image', ctx=Load()), type_comment=None), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x_image', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='weights', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='biases', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='convs', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='pools', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='deconv', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='dw_h_convs', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='up_h_convs', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_size', ctx=Store())], value=Constant(value=1000, kind=None), type_comment=None), Assign(targets=[Name(id='size', ctx=Store())], value=Name(id='in_size', ctx=Load()), type_comment=None), For(target=Name(id='layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0, kind=None), Name(id='layers', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='features', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Pow(), right=Name(id='layer', ctx=Load())), op=Mult(), right=Name(id='features_root', ctx=Load())), type_comment=None), Assign(targets=[Name(id='stddev', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=2, kind=None), op=Div(), right=BinOp(left=BinOp(left=Name(id='filter_size', ctx=Load()), op=Pow(), right=Constant(value=2, kind=None)), op=Mult(), right=Name(id='features', ctx=Load())))], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='layer', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='channels', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None)], orelse=[Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None)]), Assign(targets=[Name(id='w2', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='features', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='b1', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='b2', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv1', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='w1', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='tmp_h_conv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv1', ctx=Load()), op=Add(), right=Name(id='b1', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv2', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='tmp_h_conv', ctx=Load()), Name(id='w2', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv2', ctx=Load()), op=Add(), right=Name(id='b2', ctx=Load()))], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='w1', ctx=Load()), Name(id='w2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='biases', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='b1', ctx=Load()), Name(id='b2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='conv1', ctx=Load()), Name(id='conv2', ctx=Load())], ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Sub(), value=Constant(value=4, kind=None)), If(test=Compare(left=Name(id='layer', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=1, kind=None))]), body=[Assign(targets=[Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Call(func=Name(id='max_pool', ctx=Load()), args=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), Name(id='pool_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), type_comment=None), AugAssign(target=Name(id='size', ctx=Store()), op=Div(), value=Constant(value=2, kind=None))], orelse=[])], orelse=[], type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=1, kind=None))), ctx=Load()), type_comment=None), For(target=Name(id='layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=2, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None))], keywords=[]), body=[Assign(targets=[Name(id='features', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Pow(), right=BinOp(left=Name(id='layer', ctx=Load()), op=Add(), right=Constant(value=1, kind=None))), op=Mult(), right=Name(id='features_root', ctx=Load())), type_comment=None), Assign(targets=[Name(id='stddev', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=2, kind=None), op=Div(), right=BinOp(left=BinOp(left=Name(id='filter_size', ctx=Load()), op=Pow(), right=Constant(value=2, kind=None)), op=Mult(), right=Name(id='features', ctx=Load())))], keywords=[]), type_comment=None), Assign(targets=[Name(id='wd', ctx=Store())], value=Call(func=Name(id='weight_variable_devonc', ctx=Load()), args=[List(elts=[Name(id='pool_size', ctx=Load()), Name(id='pool_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='bd', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='h_deconv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Call(func=Name(id='deconv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='wd', ctx=Load()), Name(id='pool_size', ctx=Load())], keywords=[]), op=Add(), right=Name(id='bd', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='h_deconv_concat', ctx=Store())], value=Call(func=Name(id='crop_and_concat', ctx=Load()), args=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), Name(id='h_deconv', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='deconv', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Name(id='h_deconv_concat', ctx=Load()), type_comment=None), Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='features', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='w2', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='b1', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='b2', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv1', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='h_deconv_concat', ctx=Load()), Name(id='w1', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='h_conv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv1', ctx=Load()), op=Add(), right=Name(id='b1', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv2', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='h_conv', ctx=Load()), Name(id='w2', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv2', ctx=Load()), op=Add(), right=Name(id='b2', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Name(id='in_node', ctx=Load()), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='w1', ctx=Load()), Name(id='w2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='biases', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='b1', ctx=Load()), Name(id='b2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='conv1', ctx=Load()), Name(id='conv2', ctx=Load())], ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Mult(), value=Constant(value=2, kind=None)), AugAssign(target=Name(id='size', ctx=Store()), op=Sub(), value=Constant(value=4, kind=None))], orelse=[], type_comment=None), Assign(targets=[Name(id='weight', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Name(id='features_root', ctx=Load()), Name(id='n_class', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='bias', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='weight', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=1.0, kind=None)], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_map', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv', ctx=Load()), op=Add(), right=Name(id='bias', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Constant(value='out', kind=None)), ctx=Store())], value=Name(id='output_map', ctx=Load()), type_comment=None), If(test=Name(id='summaries', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='c1', ctx=Store()), Name(id='c2', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='convs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_conv_%02d_01', kind=None), op=Mod(), right=Name(id='i', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Name(id='c1', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_conv_%02d_02', kind=None), op=Mod(), right=Name(id='i', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Name(id='c2', ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pools', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_pool_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='deconv', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_deconv_concat_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Subscript(value=Name(id='deconv', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dw_h_convs', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='dw_convolution_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), op=Add(), right=Constant(value='/activations', kind=None)), Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='up_h_convs', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='up_convolution_%s', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), op=Add(), right=Constant(value='/activations', kind=None)), Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[], type_comment=None)], orelse=[]), Assign(targets=[Name(id='variables', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), For(target=Tuple(elts=[Name(id='w1', ctx=Store()), Name(id='w2', ctx=Store())], ctx=Store()), iter=Name(id='weights', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w1', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w2', ctx=Load())], keywords=[]))], orelse=[], type_comment=None), For(target=Tuple(elts=[Name(id='b1', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store()), iter=Name(id='biases', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b1', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b2', ctx=Load())], keywords=[]))], orelse=[], type_comment=None), Return(value=Tuple(elts=[Name(id='output_map', ctx=Load()), Name(id='variables', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='in_size', ctx=Load()), op=Sub(), right=Name(id='size', ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[], returns=None, type_comment=None), ClassDef(name='Unet', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=""\n    A unet implementation\n\n    :param channels: (optional) number of channels in the input image\n    :param n_class: (optional) number of output labels\n    :param cost: (optional) name of the cost function. Default is 'cross_entropy'\n    :param cost_kwargs: (optional) kwargs passed to the cost function. See Unet._get_cost for more options\n    "", kind=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='channels', annotation=None, type_comment=None), arg(arg='n_class', annotation=None, type_comment=None), arg(arg='cost', annotation=None, type_comment=None), arg(arg='cost_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None, type_comment=None), defaults=[Constant(value=3, kind=None), Constant(value=2, kind=None), Constant(value='cross_entropy', kind=None), Dict(keys=[], values=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reset_default_graph', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Store())], value=Name(id='n_class', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='summaries', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='summaries', kind=None), Constant(value=True, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Constant(value='float', kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Name(id='channels', ctx=Load())], ctx=Load()))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Constant(value='float', kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Name(id='n_class', ctx=Load())], ctx=Load()))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='logits', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_conv_net', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Load()), Name(id='channels', ctx=Load()), Name(id='n_class', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cost', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cost', ctx=Load()), args=[Name(id='logits', ctx=Load()), Name(id='cost', ctx=Load()), Name(id='cost_kwargs', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gradients_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='gradients', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cross_entropy', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Name(id='cross_entropy', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Store())], value=Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='correct_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='equal', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='argmax', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Load()), Constant(value=3, kind=None)], keywords=[]), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='argmax', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), Constant(value=3, kind=None)], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='accuracy', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='correct_pred', ctx=Load()), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[])], keywords=[]), type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_get_cost', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='logits', annotation=None, type_comment=None), arg(arg='cost_name', annotation=None, type_comment=None), arg(arg='cost_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Constructs the cost function, either cross_entropy, weighted cross_entropy or dice_coefficient.\n        Optional arguments are:\n        class_weights: weights for the different classes in case of multi-class imbalance\n        regularizer: power of the L2 regularizers added to the loss function\n        ', kind=None)), Assign(targets=[Name(id='flat_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='logits', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='flat_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='cost_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cross_entropy', kind=None)]), body=[Assign(targets=[Name(id='class_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='cost_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='class_weights', kind=None), Constant(value=None, kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='class_weights', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='class_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='class_weights', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='np', ctx=Load()), attr='float32', ctx=Load()))])], keywords=[]), type_comment=None), Assign(targets=[Name(id='weight_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='multiply', ctx=Load()), args=[Name(id='flat_labels', ctx=Load()), Name(id='class_weights', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='weight_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='weight_map', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1, kind=None))]), type_comment=None), Assign(targets=[Name(id='loss_map', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='softmax_cross_entropy_with_logits_v2', ctx=Load()), args=[], keywords=[keyword(arg='logits', value=Name(id='flat_logits', ctx=Load())), keyword(arg='labels', value=Name(id='flat_labels', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='weighted_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='multiply', ctx=Load()), args=[Name(id='loss_map', ctx=Load()), Name(id='weight_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Name(id='weighted_loss', ctx=Load())], keywords=[]), type_comment=None)], orelse=[Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='softmax_cross_entropy_with_logits_v2', ctx=Load()), args=[], keywords=[keyword(arg='logits', value=Name(id='flat_logits', ctx=Load())), keyword(arg='labels', value=Name(id='flat_labels', ctx=Load()))])], keywords=[]), type_comment=None)])], orelse=[If(test=Compare(left=Name(id='cost_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='dice_coefficient', kind=None)]), body=[Assign(targets=[Name(id='eps', ctx=Store())], value=Constant(value=1e-05, kind=None), type_comment=None), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='intersection', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[BinOp(left=Name(id='prediction', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='union', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='eps', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='prediction', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load())], keywords=[])), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=UnaryOp(op=USub(), operand=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Mult(), right=Name(id='intersection', ctx=Load())), op=Div(), right=Name(id='union', ctx=Load()))), type_comment=None)], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown cost function: ', kind=None), op=Mod(), right=Name(id='cost_name', ctx=Load()))], keywords=[]), cause=None)])]), Assign(targets=[Name(id='regularizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='cost_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='regularizer', kind=None), Constant(value=None, kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='regularizer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='regularizers', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='l2_loss', ctx=Load()), args=[Name(id='variable', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='variable', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), type_comment=None), AugAssign(target=Name(id='loss', ctx=Store()), op=Add(), value=BinOp(left=Name(id='regularizer', ctx=Load()), op=Mult(), right=Name(id='regularizers', ctx=Load())))], orelse=[]), Return(value=Name(id='loss', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='predict', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None), arg(arg='x_test', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Uses the model to create a prediction for the given data\n\n        :param model_path: path to the model checkpoint to restore\n        :param x_test: Data to predict on. Shape [n, nx, ny, channels]\n        :returns prediction: The unet prediction Shape [n, px, py, labels] (px=nx-self.offset/2)\n        ', kind=None)), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='global_variables_initializer', ctx=Load()), args=[], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Session', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='sess', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='init', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_dummy', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='x_test', ctx=Load()), Name(id='y_dummy', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None)], type_comment=None), Return(value=Name(id='prediction', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Saves the current session to a checkpoint\n\n        :param sess: current session\n        :param model_path: path to file system location\n        ', kind=None)), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='saver', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[]), type_comment=None), Return(value=Name(id='save_path', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='restore', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Restores a session from a checkpoint\n\n        :param sess: current session instance\n        :param model_path: path to file system checkpoint location\n        ', kind=None)), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='saver', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='Model restored from file: %s', kind=None), op=Mod(), right=Name(id='model_path', ctx=Load()))], keywords=[]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), ClassDef(name='Trainer', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Trains a unet instance\n\n    :param net: the unet instance to train\n    :param batch_size: size of training batch\n    :param norm_grads: (optional) true if normalized gradients should be added to the summaries\n    :param optimizer: (optional) name of the optimizer to use (momentum or adam)\n    :param opt_kwargs: (optional) kwargs passed to the learning rate (momentum opt) and to the optimizer\n\n    ', kind=None)), Assign(targets=[Name(id='verification_batch_size', ctx=Store())], value=Constant(value=4, kind=None), type_comment=None), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='net', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='norm_grads', annotation=None, type_comment=None), arg(arg='optimizer', annotation=None, type_comment=None), arg(arg='opt_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=1, kind=None), Constant(value=False, kind=None), Constant(value='momentum', kind=None), Dict(keys=[], values=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Store())], value=Name(id='net', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Store())], value=Name(id='norm_grads', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Store())], value=Name(id='optimizer', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Store())], value=Name(id='opt_kwargs', ctx=Load()), type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_get_optimizer', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='global_step', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='momentum', kind=None)]), body=[Assign(targets=[Name(id='learning_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Constant(value=0.2, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='decay_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='decay_rate', kind=None), Constant(value=0.95, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='momentum', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='momentum', kind=None), Constant(value=0.2, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='exponential_decay', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Name(id='learning_rate', ctx=Load())), keyword(arg='global_step', value=Name(id='global_step', ctx=Load())), keyword(arg='decay_steps', value=Name(id='training_iters', ctx=Load())), keyword(arg='decay_rate', value=Name(id='decay_rate', ctx=Load())), keyword(arg='staircase', value=Constant(value=True, kind=None))]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='MomentumOptimizer', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())), keyword(arg='momentum', value=Name(id='momentum', ctx=Load())), keyword(arg=None, value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()))]), attr='minimize', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None)], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='adam', kind=None)]), body=[Assign(targets=[Name(id='learning_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Constant(value=0.001, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='learning_rate', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='AdamOptimizer', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())), keyword(arg=None, value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()))]), attr='minimize', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None)], orelse=[])]), Return(value=Name(id='optimizer', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_initialize', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='output_path', annotation=None, type_comment=None), arg(arg='restore', annotation=None, type_comment=None), arg(arg='prediction_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='global_step', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Constant(value=0, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.0, kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='gradients_node', ctx=Load())], keywords=[])], ctx=Load()))])], keywords=[]), type_comment=None), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='summaries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='norm_grads', kind=None), Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='loss', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='cross_entropy', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cross_entropy', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='accuracy', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='accuracy', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_optimizer', ctx=Load()), args=[Name(id='training_iters', ctx=Load()), Name(id='global_step', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='summary_op', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='merge_all', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='global_variables_initializer', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Store())], value=Name(id='prediction_path', ctx=Load()), type_comment=None), Assign(targets=[Name(id='abs_prediction_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]), type_comment=None), If(test=UnaryOp(op=Not(), operand=Name(id='restore', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Removing '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True, kind=None))])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Removing '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True, kind=None))]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Allocating '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Allocating '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='init', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='data_provider', annotation=None, type_comment=None), arg(arg='output_path', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='epochs', annotation=None, type_comment=None), arg(arg='dropout', annotation=None, type_comment=None), arg(arg='display_step', annotation=None, type_comment=None), arg(arg='restore', annotation=None, type_comment=None), arg(arg='write_graph', annotation=None, type_comment=None), arg(arg='prediction_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=10, kind=None), Constant(value=100, kind=None), Constant(value=0.75, kind=None), Constant(value=1, kind=None), Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value='prediction', kind=None)]), body=[Expr(value=Constant(value='\n        Lauches the training process\n\n        :param data_provider: callable returning training and verification data\n        :param output_path: path where to store checkpoints\n        :param training_iters: number of training mini batch iteration\n        :param epochs: number of epochs\n        :param dropout: dropout probability\n        :param display_step: number of steps till outputting stats\n        :param restore: Flag if previous model should be restored\n        :param write_graph: Flag if the computation graph should be written as protobuf file to the output path\n        :param prediction_path: path where to save predictions on each epoch\n        ', kind=None)), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_path', ctx=Load()), Constant(value='model.ckpt', kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='epochs', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Return(value=Name(id='save_path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_initialize', ctx=Load()), args=[Name(id='training_iters', ctx=Load()), Name(id='output_path', ctx=Load()), Name(id='restore', ctx=Load()), Name(id='prediction_path', ctx=Load())], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Session', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='sess', ctx=Store()))], body=[If(test=Name(id='write_graph', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='write_graph', ctx=Load()), args=[Attribute(value=Name(id='sess', ctx=Load()), attr='graph_def', ctx=Load()), Name(id='output_path', ctx=Load()), Constant(value='graph.pb', kind=None), Constant(value=False, kind=None)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='init', ctx=Load())], keywords=[])), If(test=Name(id='restore', ctx=Load()), body=[Assign(targets=[Name(id='ckpt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='get_checkpoint_state', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]), type_comment=None), If(test=BoolOp(op=And(), values=[Name(id='ckpt', ctx=Load()), Attribute(value=Name(id='ckpt', ctx=Load()), attr='model_checkpoint_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Attribute(value=Name(id='ckpt', ctx=Load()), attr='model_checkpoint_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='test_x', ctx=Store()), Name(id='test_y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='data_provider', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='verification_batch_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='pred_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_prediction', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='test_x', ctx=Load()), Name(id='test_y', ctx=Load()), Constant(value='_init', kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='summary_writer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='FileWriter', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='graph', value=Attribute(value=Name(id='sess', ctx=Load()), attr='graph', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Start optimization', kind=None)], keywords=[])), Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=Constant(value=None, kind=None), type_comment=None), For(target=Name(id='epoch', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='epochs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='total_loss', ctx=Store())], value=Constant(value=0, kind=None), type_comment=None), For(target=Name(id='step', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='epoch', ctx=Load()), op=Mult(), right=Name(id='training_iters', ctx=Load())), BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Constant(value=1, kind=None)), op=Mult(), right=Name(id='training_iters', ctx=Load()))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='batch_x', ctx=Store()), Name(id='batch_y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='data_provider', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='batch_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='loss', ctx=Store()), Name(id='lr', ctx=Store()), Name(id='gradients', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='gradients_node', ctx=Load())], ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[]), Name(id='dropout', ctx=Load())]))]), type_comment=None), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='summaries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Load())]), body=[Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=Call(func=Name(id='_update_avg_gradients', ctx=Load()), args=[Name(id='avg_gradients', ctx=Load()), Name(id='gradients', ctx=Load()), Name(id='step', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='norm_gradients', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='gradient', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='gradient', ctx=Store()), iter=Name(id='avg_gradients', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Load()), attr='assign', ctx=Load()), args=[Name(id='norm_gradients', ctx=Load())], keywords=[]), attr='eval', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='step', ctx=Load()), op=Mod(), right=Name(id='display_step', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_minibatch_stats', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='summary_writer', ctx=Load()), Name(id='step', ctx=Load()), Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='total_loss', ctx=Store()), op=Add(), value=Name(id='loss', ctx=Load()))], orelse=[], type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_epoch_stats', ctx=Load()), args=[Name(id='epoch', ctx=Load()), Name(id='total_loss', ctx=Load()), Name(id='training_iters', ctx=Load()), Name(id='lr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_prediction', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='test_x', ctx=Load()), Name(id='test_y', ctx=Load()), BinOp(left=Constant(value='epoch_%s', kind=None), op=Mod(), right=Name(id='epoch', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='save_path', ctx=Load())], keywords=[]), type_comment=None)], orelse=[], type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Optimization Finished!', kind=None)], keywords=[])), Return(value=Name(id='save_path', ctx=Load()))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='store_prediction', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='batch_x', annotation=None, type_comment=None), arg(arg='batch_y', annotation=None, type_comment=None), arg(arg='name', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='predicter', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None), Assign(targets=[Name(id='pred_shape', ctx=Store())], value=Attribute(value=Name(id='prediction', ctx=Load()), attr='shape', ctx=Load()), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[]), Constant(value=1.0, kind=None)]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Verification error= {:.1f}%, loss= {:.4f}', kind=None), attr='format', ctx=Load()), args=[Call(func=Name(id='error_rate', ctx=Load()), args=[Name(id='prediction', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Attribute(value=Name(id='prediction', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]), Name(id='loss', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='img', ctx=Store())], value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='combine_img_prediction', ctx=Load()), args=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Name(id='prediction', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='save_image', ctx=Load()), args=[Name(id='img', ctx=Load()), BinOp(left=Constant(value='%s/%s.jpg', kind=None), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()))], keywords=[])), Return(value=Name(id='pred_shape', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='output_epoch_stats', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='epoch', annotation=None, type_comment=None), arg(arg='total_loss', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='lr', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Epoch {:}, Average loss: {:.4f}, learning rate: {:.4f}', kind=None), attr='format', ctx=Load()), args=[Name(id='epoch', ctx=Load()), BinOp(left=Name(id='total_loss', ctx=Load()), op=Div(), right=Name(id='training_iters', ctx=Load())), Name(id='lr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='output_minibatch_stats', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='summary_writer', annotation=None, type_comment=None), arg(arg='step', annotation=None, type_comment=None), arg(arg='batch_x', annotation=None, type_comment=None), arg(arg='batch_y', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='summary_str', ctx=Store()), Name(id='loss', ctx=Store()), Name(id='acc', ctx=Store()), Name(id='predictions', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='summary_op', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='accuracy', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='predicter', ctx=Load())], ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Name(id='summary_str', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='summary_writer', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Iter {:}, Minibatch Loss= {:.4f}, Training Accuracy= {:.4f}, Minibatch error= {:.1f}%', kind=None), attr='format', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='loss', ctx=Load()), Name(id='acc', ctx=Load()), Call(func=Name(id='error_rate', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Name(id='batch_y', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), FunctionDef(name='_update_avg_gradients', args=arguments(posonlyargs=[], args=[arg(arg='avg_gradients', annotation=None, type_comment=None), arg(arg='gradients', annotation=None, type_comment=None), arg(arg='step', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='avg_gradients', ctx=Load()), ops=[Is()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='gradient', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='gradient', ctx=Store()), iter=Name(id='gradients', ctx=Load()), ifs=[], is_async=0)]), type_comment=None)], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='gradients', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='avg_gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='avg_gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=1.0, kind=None), op=Sub(), right=BinOp(left=Constant(value=1.0, kind=None), op=Div(), right=BinOp(left=Name(id='step', ctx=Load()), op=Add(), right=Constant(value=1, kind=None))))), op=Add(), right=BinOp(left=Subscript(value=Name(id='gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), op=Div(), right=BinOp(left=Name(id='step', ctx=Load()), op=Add(), right=Constant(value=1, kind=None)))), type_comment=None)], orelse=[], type_comment=None), Return(value=Name(id='avg_gradients', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='error_rate', args=arguments(posonlyargs=[], args=[arg(arg='predictions', annotation=None, type_comment=None), arg(arg='labels', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n    Return the error rate based on dense predictions and 1-hot labels.\n    ', kind=None)), Return(value=BinOp(left=Constant(value=100.0, kind=None), op=Sub(), right=BinOp(left=BinOp(left=Constant(value=100.0, kind=None), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Constant(value=3, kind=None)], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='labels', ctx=Load()), Constant(value=3, kind=None)], keywords=[])])], keywords=[])), op=Div(), right=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load())), op=Mult(), right=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load())))))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='get_image_summary', args=arguments(posonlyargs=[], args=[arg(arg='img', annotation=None, type_comment=None), arg(arg='idx', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0, kind=None)]), body=[Expr(value=Constant(value='\n    Make an image summary for 4d tensor image with index idx\n    ', kind=None)), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='slice', ctx=Load()), args=[Name(id='img', ctx=Load()), Tuple(elts=[Constant(value=0, kind=None), Constant(value=0, kind=None), Constant(value=0, kind=None), Name(id='idx', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=1, kind=None), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Constant(value=1, kind=None)], ctx=Load())], keywords=[]), type_comment=None), AugAssign(target=Name(id='V', ctx=Store()), op=Sub(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_min', ctx=Load()), args=[Name(id='V', ctx=Load())], keywords=[])), AugAssign(target=Name(id='V', ctx=Store()), op=Div(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_max', ctx=Load()), args=[Name(id='V', ctx=Load())], keywords=[])), AugAssign(target=Name(id='V', ctx=Store()), op=Mult(), value=Constant(value=255, kind=None)), Assign(targets=[Name(id='img_w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='img', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='img_h', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='img', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='V', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[Tuple(elts=[Name(id='img_w', ctx=Load()), Name(id='img_h', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='transpose', ctx=Load()), args=[Name(id='V', ctx=Load()), Tuple(elts=[Constant(value=2, kind=None), Constant(value=0, kind=None), Constant(value=1, kind=None)], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='V', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='img_w', ctx=Load()), Name(id='img_h', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Name(id='V', ctx=Load()))], decorator_list=[], returns=None, type_comment=None)], type_ignores=[])","Module(body=[Expr(value=Constant(value='\nCreated on Jul 28, 2016\n\nauthor: jakeret\n', kind=None)), ImportFrom(module='__future__', names=[alias(name='print_function', asname=None), alias(name='division', asname=None), alias(name='absolute_import', asname=None), alias(name='unicode_literals', asname=None)], level=0), Import(names=[alias(name='os', asname=None)]), Import(names=[alias(name='shutil', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), ImportFrom(module='tf_unet', names=[alias(name='util', asname=None)], level=0), ImportFrom(module='tf_unet.layers', names=[alias(name='weight_variable', asname=None), alias(name='weight_variable_devonc', asname=None), alias(name='bias_variable', asname=None), alias(name='conv2d', asname=None), alias(name='deconv2d', asname=None), alias(name='max_pool', asname=None), alias(name='crop_and_concat', asname=None), alias(name='pixel_wise_softmax_2', asname=None), alias(name='cross_entropy', asname=None)], level=0), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='basicConfig', ctx=Load()), args=[], keywords=[keyword(arg='level', value=Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())), keyword(arg='format', value=Constant(value='%(asctime)s %(message)s', kind=None))])), FunctionDef(name='create_conv_net', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='keep_prob', annotation=None, type_comment=None), arg(arg='channels', annotation=None, type_comment=None), arg(arg='n_class', annotation=None, type_comment=None), arg(arg='layers', annotation=None, type_comment=None), arg(arg='features_root', annotation=None, type_comment=None), arg(arg='filter_size', annotation=None, type_comment=None), arg(arg='pool_size', annotation=None, type_comment=None), arg(arg='summaries', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=3, kind=None), Constant(value=16, kind=None), Constant(value=3, kind=None), Constant(value=2, kind=None), Constant(value=True, kind=None)]), body=[Expr(value=Constant(value='\n    Creates a new convolutional unet for the given parametrization.\n\n    :param x: input tensor, shape [?,nx,ny,channels]\n    :param keep_prob: dropout probability tensor\n    :param channels: number of channels in the input image\n    :param n_class: number of output labels\n    :param layers: number of layers in the net\n    :param features_root: number of features in the first layer\n    :param filter_size: size of the convolution filter\n    :param pool_size: size of the max pooling operation\n    :param summaries: Flag if summaries should be created\n    ', kind=None)), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Layers {layers}, features {features}, filter size {filter_size}x{filter_size}, pool size: {pool_size}x{pool_size}', kind=None), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='layers', value=Name(id='layers', ctx=Load())), keyword(arg='features', value=Name(id='features_root', ctx=Load())), keyword(arg='filter_size', value=Name(id='filter_size', ctx=Load())), keyword(arg='pool_size', value=Name(id='pool_size', ctx=Load()))])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='preprocessing', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='nx', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='ny', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='x_image', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='x', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='nx', ctx=Load()), Name(id='ny', ctx=Load()), Name(id='channels', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Name(id='x_image', ctx=Load()), type_comment=None), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='x_image', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None)], type_comment=None), Assign(targets=[Name(id='weights', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='biases', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='convs', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), Assign(targets=[Name(id='pools', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='deconv', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='dw_h_convs', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='up_h_convs', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_size', ctx=Store())], value=Constant(value=1000, kind=None), type_comment=None), Assign(targets=[Name(id='size', ctx=Store())], value=Name(id='in_size', ctx=Load()), type_comment=None), For(target=Name(id='layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0, kind=None), Name(id='layers', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='down_conv_{}', kind=None), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='layer', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='features', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Pow(), right=Name(id='layer', ctx=Load())), op=Mult(), right=Name(id='features_root', ctx=Load())), type_comment=None), Assign(targets=[Name(id='stddev', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=2, kind=None), op=Div(), right=BinOp(left=BinOp(left=Name(id='filter_size', ctx=Load()), op=Pow(), right=Constant(value=2, kind=None)), op=Mult(), right=Name(id='features', ctx=Load())))], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='layer', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='channels', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w1', kind=None))]), type_comment=None)], orelse=[Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w1', kind=None))]), type_comment=None)]), Assign(targets=[Name(id='w2', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='features', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w2', kind=None))]), type_comment=None), Assign(targets=[Name(id='b1', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load())], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='b1', kind=None))]), type_comment=None), Assign(targets=[Name(id='b2', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load())], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='b2', kind=None))]), type_comment=None), Assign(targets=[Name(id='conv1', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='w1', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='tmp_h_conv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv1', ctx=Load()), op=Add(), right=Name(id='b1', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv2', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='tmp_h_conv', ctx=Load()), Name(id='w2', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv2', ctx=Load()), op=Add(), right=Name(id='b2', ctx=Load()))], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='w1', ctx=Load()), Name(id='w2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='biases', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='b1', ctx=Load()), Name(id='b2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='conv1', ctx=Load()), Name(id='conv2', ctx=Load())], ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Sub(), value=Constant(value=4, kind=None)), If(test=Compare(left=Name(id='layer', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=1, kind=None))]), body=[Assign(targets=[Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Call(func=Name(id='max_pool', ctx=Load()), args=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), Name(id='pool_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), type_comment=None), AugAssign(target=Name(id='size', ctx=Store()), op=Div(), value=Constant(value=2, kind=None))], orelse=[])], type_comment=None)], orelse=[], type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=1, kind=None))), ctx=Load()), type_comment=None), For(target=Name(id='layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='layers', ctx=Load()), op=Sub(), right=Constant(value=2, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None))], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='up_conv_{}', kind=None), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='layer', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='features', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Pow(), right=BinOp(left=Name(id='layer', ctx=Load()), op=Add(), right=Constant(value=1, kind=None))), op=Mult(), right=Name(id='features_root', ctx=Load())), type_comment=None), Assign(targets=[Name(id='stddev', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=2, kind=None), op=Div(), right=BinOp(left=BinOp(left=Name(id='filter_size', ctx=Load()), op=Pow(), right=Constant(value=2, kind=None)), op=Mult(), right=Name(id='features', ctx=Load())))], keywords=[]), type_comment=None), Assign(targets=[Name(id='wd', ctx=Store())], value=Call(func=Name(id='weight_variable_devonc', ctx=Load()), args=[List(elts=[Name(id='pool_size', ctx=Load()), Name(id='pool_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), Name(id='features', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='wd', kind=None))]), type_comment=None), Assign(targets=[Name(id='bd', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='bd', kind=None))]), type_comment=None), Assign(targets=[Name(id='h_deconv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Call(func=Name(id='deconv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='wd', ctx=Load()), Name(id='pool_size', ctx=Load())], keywords=[]), op=Add(), right=Name(id='bd', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='h_deconv_concat', ctx=Store())], value=Call(func=Name(id='crop_and_concat', ctx=Load()), args=[Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Load()), Name(id='h_deconv', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='deconv', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Name(id='h_deconv_concat', ctx=Load()), type_comment=None), Assign(targets=[Name(id='w1', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), Name(id='features', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w1', kind=None))]), type_comment=None), Assign(targets=[Name(id='w2', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Name(id='filter_size', ctx=Load()), Name(id='filter_size', ctx=Load()), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None)), BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w2', kind=None))]), type_comment=None), Assign(targets=[Name(id='b1', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='b1', kind=None))]), type_comment=None), Assign(targets=[Name(id='b2', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='features', ctx=Load()), op=FloorDiv(), right=Constant(value=2, kind=None))], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='b2', kind=None))]), type_comment=None), Assign(targets=[Name(id='conv1', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='h_deconv_concat', ctx=Load()), Name(id='w1', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='h_conv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv1', ctx=Load()), op=Add(), right=Name(id='b1', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='conv2', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='h_conv', ctx=Load()), Name(id='w2', ctx=Load()), Name(id='keep_prob', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='in_node', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv2', ctx=Load()), op=Add(), right=Name(id='b2', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Name(id='layer', ctx=Load())), ctx=Store())], value=Name(id='in_node', ctx=Load()), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='w1', ctx=Load()), Name(id='w2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='biases', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='b1', ctx=Load()), Name(id='b2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='conv1', ctx=Load()), Name(id='conv2', ctx=Load())], ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Mult(), value=Constant(value=2, kind=None)), AugAssign(target=Name(id='size', ctx=Store()), op=Sub(), value=Constant(value=4, kind=None))], type_comment=None)], orelse=[], type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='output_map', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='weight', ctx=Store())], value=Call(func=Name(id='weight_variable', ctx=Load()), args=[List(elts=[Constant(value=1, kind=None), Constant(value=1, kind=None), Name(id='features_root', ctx=Load()), Name(id='n_class', ctx=Load())], ctx=Load()), Name(id='stddev', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='w', kind=None))]), type_comment=None), Assign(targets=[Name(id='bias', ctx=Store())], value=Call(func=Name(id='bias_variable', ctx=Load()), args=[List(elts=[Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='bias', kind=None))]), type_comment=None), Assign(targets=[Name(id='conv', ctx=Store())], value=Call(func=Name(id='conv2d', ctx=Load()), args=[Name(id='in_node', ctx=Load()), Name(id='weight', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=1.0, kind=None)], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_map', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu', ctx=Load()), args=[BinOp(left=Name(id='conv', ctx=Load()), op=Add(), right=Name(id='bias', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Constant(value='out', kind=None)), ctx=Store())], value=Name(id='output_map', ctx=Load()), type_comment=None), If(test=Name(id='summaries', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='c1', ctx=Store()), Name(id='c2', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='convs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_conv_%02d_01', kind=None), op=Mod(), right=Name(id='i', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Name(id='c1', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_conv_%02d_02', kind=None), op=Mod(), right=Name(id='i', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Name(id='c2', ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pools', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_pool_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Subscript(value=Name(id='pools', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='deconv', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='image', ctx=Load()), args=[BinOp(left=Constant(value='summary_deconv_concat_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), Call(func=Name(id='get_image_summary', ctx=Load()), args=[Subscript(value=Name(id='deconv', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dw_h_convs', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='dw_convolution_%02d', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), op=Add(), right=Constant(value='/activations', kind=None)), Subscript(value=Name(id='dw_h_convs', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[], type_comment=None), For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='up_h_convs', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='up_convolution_%s', kind=None), op=Mod(), right=Name(id='k', ctx=Load())), op=Add(), right=Constant(value='/activations', kind=None)), Subscript(value=Name(id='up_h_convs', ctx=Load()), slice=Index(value=Name(id='k', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[], type_comment=None)], orelse=[]), Assign(targets=[Name(id='variables', ctx=Store())], value=List(elts=[], ctx=Load()), type_comment=None), For(target=Tuple(elts=[Name(id='w1', ctx=Store()), Name(id='w2', ctx=Store())], ctx=Store()), iter=Name(id='weights', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w1', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w2', ctx=Load())], keywords=[]))], orelse=[], type_comment=None), For(target=Tuple(elts=[Name(id='b1', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store()), iter=Name(id='biases', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b1', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b2', ctx=Load())], keywords=[]))], orelse=[], type_comment=None)], type_comment=None), Return(value=Tuple(elts=[Name(id='output_map', ctx=Load()), Name(id='variables', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='in_size', ctx=Load()), op=Sub(), right=Name(id='size', ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[], returns=None, type_comment=None), ClassDef(name='Unet', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=""\n    A unet implementation\n\n    :param channels: (optional) number of channels in the input image\n    :param n_class: (optional) number of output labels\n    :param cost: (optional) name of the cost function. Default is 'cross_entropy'\n    :param cost_kwargs: (optional) kwargs passed to the cost function. See Unet._get_cost for more options\n    "", kind=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='channels', annotation=None, type_comment=None), arg(arg='n_class', annotation=None, type_comment=None), arg(arg='cost', annotation=None, type_comment=None), arg(arg='cost_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None, type_comment=None), defaults=[Constant(value=3, kind=None), Constant(value=2, kind=None), Constant(value='cross_entropy', kind=None), Dict(keys=[], values=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reset_default_graph', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Store())], value=Name(id='n_class', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='summaries', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='summaries', kind=None), Constant(value=True, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Constant(value='float', kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Name(id='channels', ctx=Load())], ctx=Load())), keyword(arg='name', value=Constant(value='x', kind=None))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Constant(value='float', kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Name(id='n_class', ctx=Load())], ctx=Load())), keyword(arg='name', value=Constant(value='y', kind=None))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='placeholder', ctx=Load()), args=[Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='dropout_probability', kind=None))]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='logits', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_conv_net', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Load()), Name(id='channels', ctx=Load()), Name(id='n_class', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cost', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cost', ctx=Load()), args=[Name(id='logits', ctx=Load()), Name(id='cost', ctx=Load()), Name(id='cost_kwargs', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gradients_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='gradients', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load())], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='xent', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cross_entropy', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Name(id='cross_entropy', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='n_class', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])], keywords=[]), type_comment=None)], type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='results', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Store())], value=Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='correct_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='equal', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='argmax', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Load()), Constant(value=3, kind=None)], keywords=[]), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='argmax', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), Constant(value=3, kind=None)], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='accuracy', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='correct_pred', ctx=Load()), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[])], keywords=[]), type_comment=None)], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_get_cost', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='logits', annotation=None, type_comment=None), arg(arg='cost_name', annotation=None, type_comment=None), arg(arg='cost_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Constructs the cost function, either cross_entropy, weighted cross_entropy or dice_coefficient.\n        Optional arguments are:\n        class_weights: weights for the different classes in case of multi-class imbalance\n        regularizer: power of the L2 regularizers added to the loss function\n        ', kind=None)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='cost', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='flat_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='logits', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='flat_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='cost_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cross_entropy', kind=None)]), body=[Assign(targets=[Name(id='class_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='cost_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='class_weights', kind=None), Constant(value=None, kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='class_weights', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='class_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='class_weights', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='np', ctx=Load()), attr='float32', ctx=Load()))])], keywords=[]), type_comment=None), Assign(targets=[Name(id='weight_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='multiply', ctx=Load()), args=[Name(id='flat_labels', ctx=Load()), Name(id='class_weights', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='weight_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='weight_map', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1, kind=None))]), type_comment=None), Assign(targets=[Name(id='loss_map', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='softmax_cross_entropy_with_logits_v2', ctx=Load()), args=[], keywords=[keyword(arg='logits', value=Name(id='flat_logits', ctx=Load())), keyword(arg='labels', value=Name(id='flat_labels', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='weighted_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='multiply', ctx=Load()), args=[Name(id='loss_map', ctx=Load()), Name(id='weight_map', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Name(id='weighted_loss', ctx=Load())], keywords=[]), type_comment=None)], orelse=[Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_mean', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='softmax_cross_entropy_with_logits_v2', ctx=Load()), args=[], keywords=[keyword(arg='logits', value=Name(id='flat_logits', ctx=Load())), keyword(arg='labels', value=Name(id='flat_labels', ctx=Load()))])], keywords=[]), type_comment=None)])], orelse=[If(test=Compare(left=Name(id='cost_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='dice_coefficient', kind=None)]), body=[Assign(targets=[Name(id='eps', ctx=Store())], value=Constant(value=1e-05, kind=None), type_comment=None), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Name(id='pixel_wise_softmax_2', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='intersection', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[BinOp(left=Name(id='prediction', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()))], keywords=[]), type_comment=None), Assign(targets=[Name(id='union', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='eps', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='prediction', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load())], keywords=[])), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=UnaryOp(op=USub(), operand=BinOp(left=BinOp(left=Constant(value=2, kind=None), op=Mult(), right=Name(id='intersection', ctx=Load())), op=Div(), right=Name(id='union', ctx=Load()))), type_comment=None)], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown cost function: ', kind=None), op=Mod(), right=Name(id='cost_name', ctx=Load()))], keywords=[]), cause=None)])]), Assign(targets=[Name(id='regularizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='cost_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='regularizer', kind=None), Constant(value=None, kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='regularizer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='regularizers', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='l2_loss', ctx=Load()), args=[Name(id='variable', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='variable', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), type_comment=None), AugAssign(target=Name(id='loss', ctx=Store()), op=Add(), value=BinOp(left=Name(id='regularizer', ctx=Load()), op=Mult(), right=Name(id='regularizers', ctx=Load())))], orelse=[]), Return(value=Name(id='loss', ctx=Load()))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='predict', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None), arg(arg='x_test', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Uses the model to create a prediction for the given data\n\n        :param model_path: path to the model checkpoint to restore\n        :param x_test: Data to predict on. Shape [n, nx, ny, channels]\n        :returns prediction: The unet prediction Shape [n, px, py, labels] (px=nx-self.offset/2)\n        ', kind=None)), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='global_variables_initializer', ctx=Load()), args=[], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Session', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='sess', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='init', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_dummy', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), Subscript(value=Attribute(value=Name(id='x_test', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='n_class', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='predicter', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='x_test', ctx=Load()), Name(id='y_dummy', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None)], type_comment=None), Return(value=Name(id='prediction', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Saves the current session to a checkpoint\n\n        :param sess: current session\n        :param model_path: path to file system location\n        ', kind=None)), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='saver', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[]), type_comment=None), Return(value=Name(id='save_path', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='restore', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='model_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n        Restores a session from a checkpoint\n\n        :param sess: current session instance\n        :param model_path: path to file system checkpoint location\n        ', kind=None)), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='saver', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='model_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='Model restored from file: %s', kind=None), op=Mod(), right=Name(id='model_path', ctx=Load()))], keywords=[]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), ClassDef(name='Trainer', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Trains a unet instance\n\n    :param net: the unet instance to train\n    :param batch_size: size of training batch\n    :param norm_grads: (optional) true if normalized gradients should be added to the summaries\n    :param optimizer: (optional) name of the optimizer to use (momentum or adam)\n    :param opt_kwargs: (optional) kwargs passed to the learning rate (momentum opt) and to the optimizer\n\n    ', kind=None)), Assign(targets=[Name(id='verification_batch_size', ctx=Store())], value=Constant(value=4, kind=None), type_comment=None), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='net', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='norm_grads', annotation=None, type_comment=None), arg(arg='optimizer', annotation=None, type_comment=None), arg(arg='opt_kwargs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=1, kind=None), Constant(value=False, kind=None), Constant(value='momentum', kind=None), Dict(keys=[], values=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Store())], value=Name(id='net', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Store())], value=Name(id='norm_grads', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Store())], value=Name(id='optimizer', ctx=Load()), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Store())], value=Name(id='opt_kwargs', ctx=Load()), type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_get_optimizer', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='global_step', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='momentum', kind=None)]), body=[Assign(targets=[Name(id='learning_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Constant(value=0.2, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='decay_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='decay_rate', kind=None), Constant(value=0.95, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='momentum', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='momentum', kind=None), Constant(value=0.2, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='exponential_decay', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Name(id='learning_rate', ctx=Load())), keyword(arg='global_step', value=Name(id='global_step', ctx=Load())), keyword(arg='decay_steps', value=Name(id='training_iters', ctx=Load())), keyword(arg='decay_rate', value=Name(id='decay_rate', ctx=Load())), keyword(arg='staircase', value=Constant(value=True, kind=None))]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='MomentumOptimizer', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())), keyword(arg='momentum', value=Name(id='momentum', ctx=Load())), keyword(arg=None, value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()))]), attr='minimize', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None)], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='adam', kind=None)]), body=[Assign(targets=[Name(id='learning_rate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Constant(value=0.001, kind=None)], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Name(id='learning_rate', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='learning_rate', kind=None))]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='AdamOptimizer', ctx=Load()), args=[], keywords=[keyword(arg='learning_rate', value=Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())), keyword(arg=None, value=Attribute(value=Name(id='self', ctx=Load()), attr='opt_kwargs', ctx=Load()))]), attr='minimize', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None)], orelse=[])]), Return(value=Name(id='optimizer', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='_initialize', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='output_path', annotation=None, type_comment=None), arg(arg='restore', annotation=None, type_comment=None), arg(arg='prediction_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='global_step', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Constant(value=0, kind=None)], keywords=[keyword(arg='name', value=Constant(value='global_step', kind=None))]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.0, kind=None)], keywords=[keyword(arg='shape', value=List(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='gradients_node', ctx=Load())], keywords=[])], ctx=Load()))])], keywords=[keyword(arg='name', value=Constant(value='norm_gradients', kind=None))]), type_comment=None), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='summaries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='norm_grads', kind=None), Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='loss', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='cross_entropy', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cross_entropy', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='accuracy', kind=None), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='accuracy', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_optimizer', ctx=Load()), args=[Name(id='training_iters', ctx=Load()), Name(id='global_step', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='learning_rate', kind=None), Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='summary_op', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='merge_all', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='global_variables_initializer', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Store())], value=Name(id='prediction_path', ctx=Load()), type_comment=None), Assign(targets=[Name(id='abs_prediction_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='output_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]), type_comment=None), If(test=UnaryOp(op=Not(), operand=Name(id='restore', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Removing '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True, kind=None))])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Removing '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True, kind=None))]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Allocating '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='abs_prediction_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=""Allocating '{:}'"", kind=None), attr='format', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='init', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='data_provider', annotation=None, type_comment=None), arg(arg='output_path', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='epochs', annotation=None, type_comment=None), arg(arg='dropout', annotation=None, type_comment=None), arg(arg='display_step', annotation=None, type_comment=None), arg(arg='restore', annotation=None, type_comment=None), arg(arg='write_graph', annotation=None, type_comment=None), arg(arg='prediction_path', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=10, kind=None), Constant(value=100, kind=None), Constant(value=0.75, kind=None), Constant(value=1, kind=None), Constant(value=False, kind=None), Constant(value=False, kind=None), Constant(value='prediction', kind=None)]), body=[Expr(value=Constant(value='\n        Lauches the training process\n\n        :param data_provider: callable returning training and verification data\n        :param output_path: path where to store checkpoints\n        :param training_iters: number of training mini batch iteration\n        :param epochs: number of epochs\n        :param dropout: dropout probability\n        :param display_step: number of steps till outputting stats\n        :param restore: Flag if previous model should be restored\n        :param write_graph: Flag if the computation graph should be written as protobuf file to the output path\n        :param prediction_path: path where to save predictions on each epoch\n        ', kind=None)), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_path', ctx=Load()), Constant(value='model.ckpt', kind=None)], keywords=[]), type_comment=None), If(test=Compare(left=Name(id='epochs', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Return(value=Name(id='save_path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_initialize', ctx=Load()), args=[Name(id='training_iters', ctx=Load()), Name(id='output_path', ctx=Load()), Name(id='restore', ctx=Load()), Name(id='prediction_path', ctx=Load())], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Session', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='sess', ctx=Store()))], body=[If(test=Name(id='write_graph', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='write_graph', ctx=Load()), args=[Attribute(value=Name(id='sess', ctx=Load()), attr='graph_def', ctx=Load()), Name(id='output_path', ctx=Load()), Constant(value='graph.pb', kind=None), Constant(value=False, kind=None)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='init', ctx=Load())], keywords=[])), If(test=Name(id='restore', ctx=Load()), body=[Assign(targets=[Name(id='ckpt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='get_checkpoint_state', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[]), type_comment=None), If(test=BoolOp(op=And(), values=[Name(id='ckpt', ctx=Load()), Attribute(value=Name(id='ckpt', ctx=Load()), attr='model_checkpoint_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='restore', ctx=Load()), args=[Name(id='sess', ctx=Load()), Attribute(value=Name(id='ckpt', ctx=Load()), attr='model_checkpoint_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='test_x', ctx=Store()), Name(id='test_y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='data_provider', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='verification_batch_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='pred_shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_prediction', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='test_x', ctx=Load()), Name(id='test_y', ctx=Load()), Constant(value='_init', kind=None)], keywords=[]), type_comment=None), Assign(targets=[Name(id='summary_writer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='FileWriter', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='graph', value=Attribute(value=Name(id='sess', ctx=Load()), attr='graph', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Start optimization', kind=None)], keywords=[])), Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=Constant(value=None, kind=None), type_comment=None), For(target=Name(id='epoch', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='epochs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='total_loss', ctx=Store())], value=Constant(value=0, kind=None), type_comment=None), For(target=Name(id='step', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='epoch', ctx=Load()), op=Mult(), right=Name(id='training_iters', ctx=Load())), BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Constant(value=1, kind=None)), op=Mult(), right=Name(id='training_iters', ctx=Load()))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='batch_x', ctx=Store()), Name(id='batch_y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='data_provider', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='batch_size', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='loss', ctx=Store()), Name(id='lr', ctx=Store()), Name(id='gradients', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='learning_rate_node', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='gradients_node', ctx=Load())], ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[]), Name(id='dropout', ctx=Load())]))]), type_comment=None), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='summaries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='norm_grads', ctx=Load())]), body=[Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=Call(func=Name(id='_update_avg_gradients', ctx=Load()), args=[Name(id='avg_gradients', ctx=Load()), Name(id='gradients', ctx=Load()), Name(id='step', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='norm_gradients', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='gradient', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='gradient', ctx=Store()), iter=Name(id='avg_gradients', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='norm_gradients_node', ctx=Load()), attr='assign', ctx=Load()), args=[Name(id='norm_gradients', ctx=Load())], keywords=[]), attr='eval', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='step', ctx=Load()), op=Mod(), right=Name(id='display_step', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_minibatch_stats', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='summary_writer', ctx=Load()), Name(id='step', ctx=Load()), Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='total_loss', ctx=Store()), op=Add(), value=Name(id='loss', ctx=Load()))], orelse=[], type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_epoch_stats', ctx=Load()), args=[Name(id='epoch', ctx=Load()), Name(id='total_loss', ctx=Load()), Name(id='training_iters', ctx=Load()), Name(id='lr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_prediction', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='test_x', ctx=Load()), Name(id='test_y', ctx=Load()), BinOp(left=Constant(value='epoch_%s', kind=None), op=Mod(), right=Name(id='epoch', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='save_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='sess', ctx=Load()), Name(id='save_path', ctx=Load())], keywords=[]), type_comment=None)], orelse=[], type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Optimization Finished!', kind=None)], keywords=[])), Return(value=Name(id='save_path', ctx=Load()))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='store_prediction', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='batch_x', annotation=None, type_comment=None), arg(arg='batch_y', annotation=None, type_comment=None), arg(arg='name', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='predicter', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None), Assign(targets=[Name(id='pred_shape', ctx=Store())], value=Attribute(value=Name(id='prediction', ctx=Load()), attr='shape', ctx=Load()), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Name(id='pred_shape', ctx=Load())], keywords=[]), Constant(value=1.0, kind=None)]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Verification error= {:.1f}%, loss= {:.4f}', kind=None), attr='format', ctx=Load()), args=[Call(func=Name(id='error_rate', ctx=Load()), args=[Name(id='prediction', ctx=Load()), Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='crop_to_shape', ctx=Load()), args=[Name(id='batch_y', ctx=Load()), Attribute(value=Name(id='prediction', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]), Name(id='loss', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='img', ctx=Store())], value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='combine_img_prediction', ctx=Load()), args=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Name(id='prediction', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='save_image', ctx=Load()), args=[Name(id='img', ctx=Load()), BinOp(left=Constant(value='%s/%s.jpg', kind=None), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='prediction_path', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()))], keywords=[])), Return(value=Name(id='pred_shape', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='output_epoch_stats', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='epoch', annotation=None, type_comment=None), arg(arg='total_loss', annotation=None, type_comment=None), arg(arg='training_iters', annotation=None, type_comment=None), arg(arg='lr', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Epoch {:}, Average loss: {:.4f}, learning rate: {:.4f}', kind=None), attr='format', ctx=Load()), args=[Name(id='epoch', ctx=Load()), BinOp(left=Name(id='total_loss', ctx=Load()), op=Div(), right=Name(id='training_iters', ctx=Load())), Name(id='lr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='output_minibatch_stats', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='sess', annotation=None, type_comment=None), arg(arg='summary_writer', annotation=None, type_comment=None), arg(arg='step', annotation=None, type_comment=None), arg(arg='batch_x', annotation=None, type_comment=None), arg(arg='batch_y', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='summary_str', ctx=Store()), Name(id='loss', ctx=Store()), Name(id='acc', ctx=Store()), Name(id='predictions', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='summary_op', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='cost', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='accuracy', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='predicter', ctx=Load())], ctx=Load())], keywords=[keyword(arg='feed_dict', value=Dict(keys=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='net', ctx=Load()), attr='keep_prob', ctx=Load())], values=[Name(id='batch_x', ctx=Load()), Name(id='batch_y', ctx=Load()), Constant(value=1.0, kind=None)]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Name(id='summary_str', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='summary_writer', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Iter {:}, Minibatch Loss= {:.4f}, Training Accuracy= {:.4f}, Minibatch error= {:.1f}%', kind=None), attr='format', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='loss', ctx=Load()), Name(id='acc', ctx=Load()), Call(func=Name(id='error_rate', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Name(id='batch_y', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), FunctionDef(name='_update_avg_gradients', args=arguments(posonlyargs=[], args=[arg(arg='avg_gradients', annotation=None, type_comment=None), arg(arg='gradients', annotation=None, type_comment=None), arg(arg='step', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='avg_gradients', ctx=Load()), ops=[Is()], comparators=[Constant(value=None, kind=None)]), body=[Assign(targets=[Name(id='avg_gradients', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='gradient', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='gradient', ctx=Store()), iter=Name(id='gradients', ctx=Load()), ifs=[], is_async=0)]), type_comment=None)], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='gradients', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='avg_gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='avg_gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=1.0, kind=None), op=Sub(), right=BinOp(left=Constant(value=1.0, kind=None), op=Div(), right=BinOp(left=Name(id='step', ctx=Load()), op=Add(), right=Constant(value=1, kind=None))))), op=Add(), right=BinOp(left=Subscript(value=Name(id='gradients', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), op=Div(), right=BinOp(left=Name(id='step', ctx=Load()), op=Add(), right=Constant(value=1, kind=None)))), type_comment=None)], orelse=[], type_comment=None), Return(value=Name(id='avg_gradients', ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='error_rate', args=arguments(posonlyargs=[], args=[arg(arg='predictions', annotation=None, type_comment=None), arg(arg='labels', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='\n    Return the error rate based on dense predictions and 1-hot labels.\n    ', kind=None)), Return(value=BinOp(left=Constant(value=100.0, kind=None), op=Sub(), right=BinOp(left=BinOp(left=Constant(value=100.0, kind=None), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Constant(value=3, kind=None)], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='labels', ctx=Load()), Constant(value=3, kind=None)], keywords=[])])], keywords=[])), op=Div(), right=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=1, kind=None)), ctx=Load())), op=Mult(), right=Subscript(value=Attribute(value=Name(id='predictions', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=2, kind=None)), ctx=Load())))))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='get_image_summary', args=arguments(posonlyargs=[], args=[arg(arg='img', annotation=None, type_comment=None), arg(arg='idx', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=0, kind=None)]), body=[Expr(value=Constant(value='\n    Make an image summary for 4d tensor image with index idx\n    ', kind=None)), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='slice', ctx=Load()), args=[Name(id='img', ctx=Load()), Tuple(elts=[Constant(value=0, kind=None), Constant(value=0, kind=None), Constant(value=0, kind=None), Name(id='idx', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=1, kind=None), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Constant(value=1, kind=None)], ctx=Load())], keywords=[]), type_comment=None), AugAssign(target=Name(id='V', ctx=Store()), op=Sub(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_min', ctx=Load()), args=[Name(id='V', ctx=Load())], keywords=[])), AugAssign(target=Name(id='V', ctx=Store()), op=Div(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_max', ctx=Load()), args=[Name(id='V', ctx=Load())], keywords=[])), AugAssign(target=Name(id='V', ctx=Store()), op=Mult(), value=Constant(value=255, kind=None)), Assign(targets=[Name(id='img_w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='img', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='img_h', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='img', ctx=Load())], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='V', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[Tuple(elts=[Name(id='img_w', ctx=Load()), Name(id='img_h', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='transpose', ctx=Load()), args=[Name(id='V', ctx=Load()), Tuple(elts=[Constant(value=2, kind=None), Constant(value=0, kind=None), Constant(value=1, kind=None)], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='V', ctx=Load()), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='stack', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='img_w', ctx=Load()), Name(id='img_h', ctx=Load()), Constant(value=1, kind=None)], ctx=Load())], keywords=[])], keywords=[]), type_comment=None), Return(value=Name(id='V', ctx=Load()))], decorator_list=[], returns=None, type_comment=None)], type_ignores=[])"
