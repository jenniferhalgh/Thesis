Path,oldFileContent,currentFileContent
frame_level_models.py,"Module(body=[Expr(value=Constant(value='Contains a collection of models which operate on variable-length sequences.\n', kind=None)), Import(names=[alias(name='math', asname=None)]), Import(names=[alias(name='models', asname=None)]), Import(names=[alias(name='video_level_models', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), Import(names=[alias(name='model_utils', asname='utils')]), Import(names=[alias(name='tensorflow.contrib.slim', asname='slim')]), ImportFrom(module='tensorflow', names=[alias(name='flags', asname=None)], level=0), Assign(targets=[Name(id='FLAGS', ctx=Store())], value=Attribute(value=Name(id='flags', ctx=Load()), attr='FLAGS', ctx=Load()), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='iterations', kind=None), Constant(value=30, kind=None), Constant(value='Number of frames per batch for DBoF.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='dbof_add_batch_norm', kind=None), Constant(value=True, kind=None), Constant(value='Adds batch normalization to the DBoF model.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='sample_random_frames', kind=None), Constant(value=True, kind=None), Constant(value='If true samples random frames (for frame level models). If false, a randomsequence of frames is sampled instead.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='dbof_cluster_size', kind=None), Constant(value=8192, kind=None), Constant(value='Number of units in the DBoF cluster layer.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='dbof_hidden_size', kind=None), Constant(value=1024, kind=None), Constant(value='Number of units in the DBoF hidden layer.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='dbof_pooling_method', kind=None), Constant(value='max', kind=None), Constant(value=""The pooling method used in the DBoF cluster layer. Choices are 'average' and 'max'."", kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='video_level_classifier_model', kind=None), Constant(value='MoeModel', kind=None), Constant(value='Some Frame-Level models can be decomposed into a generalized pooling operation followed by a classifier layer', kind=None)], keywords=[])), ClassDef(name='FrameLevelLogisticModel', bases=[Attribute(value=Name(id='models', ctx=Load()), attr='BaseModel', ctx=Load())], keywords=[], body=[FunctionDef(name='create_model', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_input', annotation=None, type_comment=None), arg(arg='vocab_size', annotation=None, type_comment=None), arg(arg='num_frames', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='unused_params', annotation=None, type_comment=None), defaults=[]), body=[Expr(value=Constant(value=""Creates a model which uses a logistic classifier over the average of the\n    frame-level features.\n\n    This class is intended to be an example for implementors of frame level\n    models. If you want to train a model over averaged features it is more\n    efficient to average them beforehand rather than on the fly.\n\n    Args:\n      model_input: A 'batch_size' x 'max_frames' x 'num_features' matrix of\n                   input features.\n      vocab_size: The number of classes in the dataset.\n      num_frames: A vector of length 'batch' which indicates the number of\n           frames for each video (before padding).\n\n    Returns:\n      A dictionary with a tensor containing the probability predictions of the\n      model in the 'predictions' key. The dimensions of the tensor are\n      'batch_size' x 'num_classes'.\n    "", kind=None)), Assign(targets=[Name(id='num_frames', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), Constant(value=1, kind=None)], keywords=[]), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='feature_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='denominators', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), List(elts=[Constant(value=1, kind=None), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='avg_pooled', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='model_input', ctx=Load())], keywords=[keyword(arg='axis', value=List(elts=[Constant(value=1, kind=None)], ctx=Load()))]), op=Div(), right=Name(id='denominators', ctx=Load())), type_comment=None), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='fully_connected', ctx=Load()), args=[Name(id='avg_pooled', ctx=Load()), Name(id='vocab_size', ctx=Load())], keywords=[keyword(arg='activation_fn', value=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='sigmoid', ctx=Load())), keyword(arg='weights_regularizer', value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='l2_regularizer', ctx=Load()), args=[Constant(value=1e-05, kind=None)], keywords=[]))]), type_comment=None), Return(value=Dict(keys=[Constant(value='predictions', kind=None)], values=[Name(id='output', ctx=Load())]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), ClassDef(name='DBoFModel', bases=[Attribute(value=Name(id='models', ctx=Load()), attr='BaseModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=""Creates a Deep Bag of Frames model.\n\n  The model projects the features for each frame into a higher dimensional\n  'clustering' space, pools across frames in that space, and then\n  uses a configurable video-level model to classify the now aggregated features.\n\n  The model will randomly sample either frames or sequences of frames during\n  training to speed up convergence.\n\n  Args:\n    model_input: A 'batch_size' x 'max_frames' x 'num_features' matrix of\n                 input features.\n    vocab_size: The number of classes in the dataset.\n    num_frames: A vector of length 'batch' which indicates the number of\n         frames for each video (before padding).\n\n  Returns:\n    A dictionary with a tensor containing the probability predictions of the\n    model in the 'predictions' key. The dimensions of the tensor are\n    'batch_size' x 'num_classes'.\n  "", kind=None)), FunctionDef(name='create_model', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_input', annotation=None, type_comment=None), arg(arg='vocab_size', annotation=None, type_comment=None), arg(arg='num_frames', annotation=None, type_comment=None), arg(arg='iterations', annotation=None, type_comment=None), arg(arg='add_batch_norm', annotation=None, type_comment=None), arg(arg='sample_random_frames', annotation=None, type_comment=None), arg(arg='cluster_size', annotation=None, type_comment=None), arg(arg='hidden_size', annotation=None, type_comment=None), arg(arg='is_training', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='unused_params', annotation=None, type_comment=None), defaults=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=True, kind=None)]), body=[Assign(targets=[Name(id='iterations', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='iterations', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='iterations', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='add_batch_norm', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='add_batch_norm', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_add_batch_norm', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='random_frames', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='sample_random_frames', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='sample_random_frames', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='cluster_size', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cluster_size', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_cluster_size', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='hidden1_size', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='hidden_size', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_hidden_size', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='num_frames', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), Constant(value=1, kind=None)], keywords=[]), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='random_frames', ctx=Load()), body=[Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='SampleRandomFrames', ctx=Load()), args=[Name(id='model_input', ctx=Load()), Name(id='num_frames', ctx=Load()), Name(id='iterations', ctx=Load())], keywords=[]), type_comment=None)], orelse=[Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='SampleRandomSequence', ctx=Load()), args=[Name(id='model_input', ctx=Load()), Name(id='num_frames', ctx=Load()), Name(id='iterations', ctx=Load())], keywords=[]), type_comment=None)]), Assign(targets=[Name(id='max_frames', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='feature_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='reshaped_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='model_input', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='input_hist', kind=None), Name(id='reshaped_input', ctx=Load())], keywords=[])), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='reshaped_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='reshaped_input', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='input_bn', kind=None))]), type_comment=None)], orelse=[]), Assign(targets=[Name(id='cluster_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='feature_size', ctx=Load()), Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='feature_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_weights', kind=None), Name(id='cluster_weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='reshaped_input', ctx=Load()), Name(id='cluster_weights', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='cluster_bn', kind=None))]), type_comment=None)], orelse=[Assign(targets=[Name(id='cluster_biases', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='feature_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_biases', kind=None), Name(id='cluster_biases', ctx=Load())], keywords=[])), AugAssign(target=Name(id='activation', ctx=Store()), op=Add(), value=Name(id='cluster_biases', ctx=Load()))]), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu6', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_output', kind=None), Name(id='activation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='activation', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='max_frames', ctx=Load()), Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='FramePooling', ctx=Load()), args=[Name(id='activation', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_pooling_method', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='hidden1_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='cluster_size', ctx=Load()), Name(id='hidden1_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='cluster_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_weights', kind=None), Name(id='hidden1_weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='activation', ctx=Load()), Name(id='hidden1_weights', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='hidden1_bn', kind=None))]), type_comment=None)], orelse=[Assign(targets=[Name(id='hidden1_biases', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='hidden1_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=Constant(value=0.01, kind=None))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_biases', kind=None), Name(id='hidden1_biases', ctx=Load())], keywords=[])), AugAssign(target=Name(id='activation', ctx=Store()), op=Add(), value=Name(id='hidden1_biases', ctx=Load()))]), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu6', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_output', kind=None), Name(id='activation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='aggregated_model', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='video_level_models', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='video_level_classifier_model', ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Call(func=Name(id='aggregated_model', ctx=Load()), args=[], keywords=[]), attr='create_model', ctx=Load()), args=[], keywords=[keyword(arg='model_input', value=Name(id='activation', ctx=Load())), keyword(arg='vocab_size', value=Name(id='vocab_size', ctx=Load())), keyword(arg=None, value=Name(id='unused_params', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[])], type_ignores=[])","Module(body=[Expr(value=Constant(value='Contains a collection of models which operate on variable-length sequences.\n', kind=None)), Import(names=[alias(name='math', asname=None)]), Import(names=[alias(name='models', asname=None)]), Import(names=[alias(name='video_level_models', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), Import(names=[alias(name='model_utils', asname='utils')]), Import(names=[alias(name='tensorflow.contrib.slim', asname='slim')]), ImportFrom(module='tensorflow', names=[alias(name='flags', asname=None)], level=0), Assign(targets=[Name(id='FLAGS', ctx=Store())], value=Attribute(value=Name(id='flags', ctx=Load()), attr='FLAGS', ctx=Load()), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='iterations', kind=None), Constant(value=30, kind=None), Constant(value='Number of frames per batch for DBoF.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='dbof_add_batch_norm', kind=None), Constant(value=True, kind=None), Constant(value='Adds batch normalization to the DBoF model.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='sample_random_frames', kind=None), Constant(value=True, kind=None), Constant(value='If true samples random frames (for frame level models). If false, a randomsequence of frames is sampled instead.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='dbof_cluster_size', kind=None), Constant(value=8192, kind=None), Constant(value='Number of units in the DBoF cluster layer.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='dbof_hidden_size', kind=None), Constant(value=1024, kind=None), Constant(value='Number of units in the DBoF hidden layer.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='dbof_pooling_method', kind=None), Constant(value='max', kind=None), Constant(value=""The pooling method used in the DBoF cluster layer. Choices are 'average' and 'max'."", kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='video_level_classifier_model', kind=None), Constant(value='MoeModel', kind=None), Constant(value='Some Frame-Level models can be decomposed into a generalized pooling operation followed by a classifier layer', kind=None)], keywords=[])), ClassDef(name='FrameLevelLogisticModel', bases=[Attribute(value=Name(id='models', ctx=Load()), attr='BaseModel', ctx=Load())], keywords=[], body=[FunctionDef(name='create_model', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_input', annotation=None, type_comment=None), arg(arg='vocab_size', annotation=None, type_comment=None), arg(arg='num_frames', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='unused_params', annotation=None, type_comment=None), defaults=[]), body=[Expr(value=Constant(value=""Creates a model which uses a logistic classifier over the average of the\n    frame-level features.\n\n    This class is intended to be an example for implementors of frame level\n    models. If you want to train a model over averaged features it is more\n    efficient to average them beforehand rather than on the fly.\n\n    Args:\n      model_input: A 'batch_size' x 'max_frames' x 'num_features' matrix of\n                   input features.\n      vocab_size: The number of classes in the dataset.\n      num_frames: A vector of length 'batch' which indicates the number of\n           frames for each video (before padding).\n\n    Returns:\n      A dictionary with a tensor containing the probability predictions of the\n      model in the 'predictions' key. The dimensions of the tensor are\n      'batch_size' x 'num_classes'.\n    "", kind=None)), Assign(targets=[Name(id='num_frames', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), Constant(value=1, kind=None)], keywords=[]), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='feature_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='denominators', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), List(elts=[Constant(value=1, kind=None), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='avg_pooled', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Name(id='model_input', ctx=Load())], keywords=[keyword(arg='axis', value=List(elts=[Constant(value=1, kind=None)], ctx=Load()))]), op=Div(), right=Name(id='denominators', ctx=Load())), type_comment=None), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='fully_connected', ctx=Load()), args=[Name(id='avg_pooled', ctx=Load()), Name(id='vocab_size', ctx=Load())], keywords=[keyword(arg='activation_fn', value=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='sigmoid', ctx=Load())), keyword(arg='weights_regularizer', value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='l2_regularizer', ctx=Load()), args=[Constant(value=1e-08, kind=None)], keywords=[]))]), type_comment=None), Return(value=Dict(keys=[Constant(value='predictions', kind=None)], values=[Name(id='output', ctx=Load())]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[]), ClassDef(name='DBoFModel', bases=[Attribute(value=Name(id='models', ctx=Load()), attr='BaseModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=""Creates a Deep Bag of Frames model.\n\n  The model projects the features for each frame into a higher dimensional\n  'clustering' space, pools across frames in that space, and then\n  uses a configurable video-level model to classify the now aggregated features.\n\n  The model will randomly sample either frames or sequences of frames during\n  training to speed up convergence.\n\n  Args:\n    model_input: A 'batch_size' x 'max_frames' x 'num_features' matrix of\n                 input features.\n    vocab_size: The number of classes in the dataset.\n    num_frames: A vector of length 'batch' which indicates the number of\n         frames for each video (before padding).\n\n  Returns:\n    A dictionary with a tensor containing the probability predictions of the\n    model in the 'predictions' key. The dimensions of the tensor are\n    'batch_size' x 'num_classes'.\n  "", kind=None)), FunctionDef(name='create_model', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='model_input', annotation=None, type_comment=None), arg(arg='vocab_size', annotation=None, type_comment=None), arg(arg='num_frames', annotation=None, type_comment=None), arg(arg='iterations', annotation=None, type_comment=None), arg(arg='add_batch_norm', annotation=None, type_comment=None), arg(arg='sample_random_frames', annotation=None, type_comment=None), arg(arg='cluster_size', annotation=None, type_comment=None), arg(arg='hidden_size', annotation=None, type_comment=None), arg(arg='is_training', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='unused_params', annotation=None, type_comment=None), defaults=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=True, kind=None)]), body=[Assign(targets=[Name(id='iterations', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='iterations', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='iterations', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='add_batch_norm', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='add_batch_norm', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_add_batch_norm', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='random_frames', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='sample_random_frames', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='sample_random_frames', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='cluster_size', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cluster_size', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_cluster_size', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='hidden1_size', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='hidden_size', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_hidden_size', ctx=Load())]), type_comment=None), Assign(targets=[Name(id='num_frames', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Name(id='num_frames', ctx=Load()), Constant(value=1, kind=None)], keywords=[]), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='random_frames', ctx=Load()), body=[Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='SampleRandomFrames', ctx=Load()), args=[Name(id='model_input', ctx=Load()), Name(id='num_frames', ctx=Load()), Name(id='iterations', ctx=Load())], keywords=[]), type_comment=None)], orelse=[Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='SampleRandomSequence', ctx=Load()), args=[Name(id='model_input', ctx=Load()), Name(id='num_frames', ctx=Load()), Name(id='iterations', ctx=Load())], keywords=[]), type_comment=None)]), Assign(targets=[Name(id='max_frames', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=1, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='feature_size', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_input', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[]), attr='as_list', ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=2, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='reshaped_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='model_input', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='feature_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='input_hist', kind=None), Name(id='reshaped_input', ctx=Load())], keywords=[])), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='reshaped_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='reshaped_input', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='input_bn', kind=None))]), type_comment=None)], orelse=[]), Assign(targets=[Name(id='cluster_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='feature_size', ctx=Load()), Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='feature_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_weights', kind=None), Name(id='cluster_weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='reshaped_input', ctx=Load()), Name(id='cluster_weights', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='cluster_bn', kind=None))]), type_comment=None)], orelse=[Assign(targets=[Name(id='cluster_biases', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='feature_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_biases', kind=None), Name(id='cluster_biases', ctx=Load())], keywords=[])), AugAssign(target=Name(id='activation', ctx=Store()), op=Add(), value=Name(id='cluster_biases', ctx=Load()))]), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu6', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='cluster_output', kind=None), Name(id='activation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='activation', ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), Name(id='max_frames', ctx=Load()), Name(id='cluster_size', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='FramePooling', ctx=Load()), args=[Name(id='activation', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='dbof_pooling_method', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='hidden1_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='cluster_size', ctx=Load()), Name(id='hidden1_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=BinOp(left=Constant(value=1, kind=None), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='cluster_size', ctx=Load())], keywords=[])))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_weights', kind=None), Name(id='hidden1_weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='activation', ctx=Load()), Name(id='hidden1_weights', ctx=Load())], keywords=[]), type_comment=None), If(test=Name(id='add_batch_norm', ctx=Load()), body=[Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='batch_norm', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[keyword(arg='center', value=Constant(value=True, kind=None)), keyword(arg='scale', value=Constant(value=True, kind=None)), keyword(arg='is_training', value=Name(id='is_training', ctx=Load())), keyword(arg='scope', value=Constant(value='hidden1_bn', kind=None))]), type_comment=None)], orelse=[Assign(targets=[Name(id='hidden1_biases', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='random_normal', ctx=Load()), args=[List(elts=[Name(id='hidden1_size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stddev', value=Constant(value=0.01, kind=None))])], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_biases', kind=None), Name(id='hidden1_biases', ctx=Load())], keywords=[])), AugAssign(target=Name(id='activation', ctx=Store()), op=Add(), value=Name(id='hidden1_biases', ctx=Load()))]), Assign(targets=[Name(id='activation', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='relu6', ctx=Load()), args=[Name(id='activation', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='hidden1_output', kind=None), Name(id='activation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='aggregated_model', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='video_level_models', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='video_level_classifier_model', ctx=Load())], keywords=[]), type_comment=None), Return(value=Call(func=Attribute(value=Call(func=Name(id='aggregated_model', ctx=Load()), args=[], keywords=[]), attr='create_model', ctx=Load()), args=[], keywords=[keyword(arg='model_input', value=Name(id='activation', ctx=Load())), keyword(arg='vocab_size', value=Name(id='vocab_size', ctx=Load())), keyword(arg=None, value=Name(id='unused_params', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None)], decorator_list=[])], type_ignores=[])"
train.py,"Module(body=[Expr(value=Constant(value='Binary for training Tensorflow models on the YouTube-8M dataset.', kind=None)), Import(names=[alias(name='time', asname=None)]), Import(names=[alias(name='eval_util', asname=None)]), Import(names=[alias(name='losses', asname=None)]), Import(names=[alias(name='frame_level_models', asname=None)]), Import(names=[alias(name='video_level_models', asname=None)]), Import(names=[alias(name='readers', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), Import(names=[alias(name='tensorflow.contrib.slim', asname='slim')]), ImportFrom(module='tensorflow', names=[alias(name='app', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='flags', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='gfile', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='logging', asname=None)], level=0), Import(names=[alias(name='utils', asname=None)]), Assign(targets=[Name(id='FLAGS', ctx=Store())], value=Attribute(value=Name(id='flags', ctx=Load()), attr='FLAGS', ctx=Load()), type_comment=None), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__', kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='train_dir', kind=None), Constant(value='/tmp/yt8m_model/', kind=None), Constant(value='The directory to save the model files in.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='train_data_pattern', kind=None), Constant(value='', kind=None), Constant(value=""File glob for the training dataset. If the files refer to Frame Level features (i.e. tensorflow.SequenceExample), then set --reader_type format. The (Sequence)Examples are expected to have 'rgb' byte array sequence feature as well as a 'labels' int64 context feature."", kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='feature_names', kind=None), Constant(value='mean_rgb', kind=None), Constant(value='Name of the feature to use for training.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='feature_sizes', kind=None), Constant(value='1024', kind=None), Constant(value='Length of the feature vectors.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='frame_features', kind=None), Constant(value=False, kind=None), Constant(value='If set, then --train_data_pattern must be frame-level features. Otherwise, --train_data_pattern must be aggregated video-level features. The model must also be set appropriately (i.e. to read 3D batches VS 4D batches.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='model', kind=None), Constant(value='LogisticModel', kind=None), Constant(value='Which architecture to use for the model. Models are defined in models.py.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='start_new_model', kind=None), Constant(value=False, kind=None), Constant(value='If set, this will not resume from a checkpoint and will instead create a new model instance.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='batch_size', kind=None), Constant(value=1024, kind=None), Constant(value='How many examples to process per batch for training.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='label_loss', kind=None), Constant(value='CrossEntropyLoss', kind=None), Constant(value='Which loss function to use for training the model.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_float', ctx=Load()), args=[Constant(value='regularization_penalty', kind=None), Constant(value=1, kind=None), Constant(value='How much weight to give to the regularization loss (the label loss has a weight of 1).', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_float', ctx=Load()), args=[Constant(value='base_learning_rate', kind=None), Constant(value=0.01, kind=None), Constant(value='Which learning rate to start with.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='num_readers', kind=None), Constant(value=8, kind=None), Constant(value='How many threads to use for reading input files.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='master', kind=None), Constant(value='', kind=None), Constant(value='TensorFlow master to use.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='task', kind=None), Constant(value=0, kind=None), Constant(value='Task id of the replica running the training. 0 implies chief Supervisor.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='ps_tasks', kind=None), Constant(value=0, kind=None), Constant(value='Number of tasks in the ps job.\n                       If 0 no ps job is used.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='optimizer', kind=None), Constant(value='AdamOptimizer', kind=None), Constant(value='What optimizer class to use.', kind=None)], keywords=[]))], orelse=[]), FunctionDef(name='validate_class_name', args=arguments(posonlyargs=[], args=[arg(arg='flag_value', annotation=None, type_comment=None), arg(arg='category', annotation=None, type_comment=None), arg(arg='modules', annotation=None, type_comment=None), arg(arg='expected_superclass', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value=""Checks that the given string matches a class of the expected type.\n\n  Args:\n    flag_value: A string naming the class to instantiate.\n    category: A string used further describe the class in error messages\n              (e.g. 'model', 'reader', 'loss').\n    modules: A list of modules to search for the given class.\n    expected_superclass: A class that the given class should inherit from.\n\n  Raises:\n    FlagsError: If the given class could not be found or if the first class\n    found with that name doesn't inherit from the expected superclass.\n\n  Returns:\n    True if a class was found that matches the given constraints.\n  "", kind=None)), Assign(targets=[Name(id='candidates', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='flag_value', ctx=Load()), Constant(value=None, kind=None)], keywords=[]), generators=[comprehension(target=Name(id='module', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), For(target=Name(id='candidate', ctx=Store()), iter=Name(id='candidates', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='candidate', ctx=Load())), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='expected_superclass', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='FlagsError', ctx=Load()), args=[BinOp(left=Constant(value=""%s '%s' doesn't inherit from %s."", kind=None), op=Mod(), right=Tuple(elts=[Name(id='category', ctx=Load()), Name(id='flag_value', ctx=Load()), Attribute(value=Name(id='expected_superclass', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))], keywords=[]), cause=None)], orelse=[]), Return(value=Constant(value=True, kind=None))], orelse=[], type_comment=None), Raise(exc=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='FlagsError', ctx=Load()), args=[BinOp(left=Constant(value=""Unable to find %s '%s'."", kind=None), op=Mod(), right=Tuple(elts=[Name(id='category', ctx=Load()), Name(id='flag_value', ctx=Load())], ctx=Load()))], keywords=[]), cause=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='get_input_data_tensors', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=None, type_comment=None), arg(arg='data_pattern', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='num_epochs', annotation=None, type_comment=None), arg(arg='num_readers', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=1000, kind=None), Constant(value=None, kind=None), Constant(value=1, kind=None)]), body=[Expr(value=Constant(value=""Creates the section of the graph which reads the training data.\n\n  Args:\n    reader: A class which parses the training data.\n    data_pattern: A 'glob' style path to the data files.\n    batch_size: How many examples to process at a time.\n    num_epochs: How many passes to make over the training data. Set to 'None'\n                to run indefinitely.\n    num_readers: How many I/O threads to use.\n\n  Returns:\n    A tuple containing the features tensor, labels tensor, and optionally a\n    tensor containing the number of frames per video. The exact dimensions\n    depend on the reader being used.\n\n  Raises:\n    IOError: If no files matching the given pattern were found.\n  "", kind=None)), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='Using batch size of ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='batch_size', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=' for training.', kind=None))], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='train_input', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='Glob', ctx=Load()), args=[Name(id='data_pattern', ctx=Load())], keywords=[]), type_comment=None), If(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load())), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=""Unable to find training files. data_pattern='"", kind=None), op=Add(), right=Name(id='data_pattern', ctx=Load())), op=Add(), right=Constant(value=""'"", kind=None))], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='number of training files: ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])), Assign(targets=[Name(id='filename_queue', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='string_input_producer', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[keyword(arg='num_epochs', value=Name(id='num_epochs', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='training_data', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='prepare_reader', ctx=Load()), args=[Name(id='filename_queue', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_readers', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='shuffle_batch_join', ctx=Load()), args=[Name(id='training_data', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='capacity', value=BinOp(left=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load()), op=Mult(), right=Constant(value=5, kind=None))), keyword(arg='min_after_dequeue', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load())), keyword(arg='allow_smaller_final_batch', value=Constant(value=True, kind=None)), keyword(arg='enqueue_many', value=Constant(value=True, kind=None))]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='find_class_by_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=None, type_comment=None), arg(arg='modules', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='Searches the provided modules for the named class and returns it.', kind=None)), Assign(targets=[Name(id='modules', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None, kind=None)], keywords=[]), generators=[comprehension(target=Name(id='module', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[Name(id='a', ctx=Load())], is_async=0)])], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='build_graph', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=None, type_comment=None), arg(arg='model', annotation=None, type_comment=None), arg(arg='train_data_pattern', annotation=None, type_comment=None), arg(arg='label_loss_fn', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='base_learning_rate', annotation=None, type_comment=None), arg(arg='optimizer_class', annotation=None, type_comment=None), arg(arg='regularization_penalty', annotation=None, type_comment=None), arg(arg='num_readers', annotation=None, type_comment=None), arg(arg='num_epochs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='CrossEntropyLoss', ctx=Load()), args=[], keywords=[]), Constant(value=1000, kind=None), Constant(value=0.01, kind=None), Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='AdamOptimizer', ctx=Load()), Constant(value=0.001, kind=None), Constant(value=1, kind=None), Constant(value=None, kind=None)]), body=[Expr(value=Constant(value=""Creates the Tensorflow graph.\n\n  This will only be called once in the life of\n  a training model, because after the graph is created the model will be\n  restored from a meta graph file rather than being recreated.\n\n  Args:\n    reader: The data file reader. It should inherit from BaseReader.\n    model: The core model (e.g. logistic or neural net). It should inherit\n           from BaseModel.\n    train_data_pattern: glob path to the training data files.\n    label_loss_fn: What kind of loss to apply to the model. It should inherit\n                from BaseLoss.\n    batch_size: How many examples to process at a time.\n    base_learning_rate: What learning rate to initialize the optimizer with.\n    optimizer_class: Which optimization algorithm to use.\n    regularization_penalty: How much weight to give the regularization loss\n                            compared to the label loss.\n    num_readers: How many threads to use for I/O operations.\n    num_epochs: How many passes to make over the data. 'None' means an\n                unlimited number of passes.\n  "", kind=None)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='device', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='replica_device_setter', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='ps_tasks', ctx=Load())], keywords=[keyword(arg='merge_devices', value=Constant(value=True, kind=None))])], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='global_step', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Constant(value=0, kind=None)], keywords=[keyword(arg='trainable', value=Constant(value=False, kind=None)), keyword(arg='name', value=Constant(value='global_step', kind=None))]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Name(id='optimizer_class', ctx=Load()), args=[Name(id='base_learning_rate', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='unused_video_id', ctx=Store()), Name(id='model_input_raw', ctx=Store()), Name(id='labels_batch', ctx=Store()), Name(id='num_frames', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_input_data_tensors', ctx=Load()), args=[Name(id='reader', ctx=Load()), Name(id='train_data_pattern', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='num_readers', value=Name(id='num_readers', ctx=Load())), keyword(arg='num_epochs', value=Name(id='num_epochs', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='model/input_raw', kind=None), Name(id='model_input_raw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_dim', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='model_input_raw', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Constant(value=1, kind=None)), type_comment=None), Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='l2_normalize', ctx=Load()), args=[Name(id='model_input_raw', ctx=Load()), Name(id='feature_dim', ctx=Load())], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='model', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='create_model', ctx=Load()), args=[Name(id='model_input', ctx=Load())], keywords=[keyword(arg='num_frames', value=Name(id='num_frames', ctx=Load())), keyword(arg='vocab_size', value=Attribute(value=Name(id='reader', ctx=Load()), attr='num_classes', ctx=Load())), keyword(arg='labels', value=Name(id='labels_batch', ctx=Load()))]), type_comment=None), For(target=Name(id='variable', ctx=Store()), iter=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='get_model_variables', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='variable', ctx=Load()), attr='op', ctx=Load()), attr='name', ctx=Load()), Name(id='variable', ctx=Load())], keywords=[]))], orelse=[], type_comment=None), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='predictions', kind=None)), ctx=Load()), type_comment=None), If(test=Compare(left=Constant(value='loss', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='loss', kind=None)), ctx=Load()), type_comment=None)], orelse=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='label_loss_fn', ctx=Load()), attr='calculate_loss', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Name(id='labels_batch', ctx=Load())], keywords=[]), type_comment=None)]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='label_loss', kind=None), Name(id='label_loss', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='regularization_loss', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='reg_loss', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='regularization_loss', kind=None)), ctx=Load()), type_comment=None)], orelse=[Assign(targets=[Name(id='reg_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.0, kind=None)], keywords=[]), type_comment=None)]), Assign(targets=[Name(id='reg_losses', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='losses', ctx=Load()), attr='get_regularization_losses', ctx=Load()), args=[], keywords=[]), type_comment=None), If(test=Name(id='reg_losses', ctx=Load()), body=[AugAssign(target=Name(id='reg_loss', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_n', ctx=Load()), args=[Name(id='reg_losses', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='regularization_penalty', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0, kind=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='reg_loss', kind=None), Name(id='reg_loss', ctx=Load())], keywords=[]))], orelse=[])], type_comment=None), Assign(targets=[Name(id='update_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='GraphKeys', ctx=Load()), attr='UPDATE_OPS', ctx=Load())], keywords=[]), type_comment=None), If(test=Compare(left=Constant(value='update_ops', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[AugAssign(target=Name(id='update_ops', ctx=Store()), op=Add(), value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='update_ops', kind=None)), ctx=Load()))], orelse=[]), If(test=Name(id='update_ops', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='control_dependencies', ctx=Load()), args=[Name(id='update_ops', ctx=Load())], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='barrier', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='no_op', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='gradient_barrier', kind=None))]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='control_dependencies', ctx=Load()), args=[List(elts=[Name(id='barrier', ctx=Load())], ctx=Load())], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='identity', ctx=Load()), args=[Name(id='label_loss', ctx=Load())], keywords=[]), type_comment=None)], type_comment=None)], type_comment=None)], orelse=[]), Assign(targets=[Name(id='final_loss', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='regularization_penalty', ctx=Load()), op=Mult(), right=Name(id='reg_loss', ctx=Load())), op=Add(), right=Name(id='label_loss', ctx=Load())), type_comment=None), Assign(targets=[Name(id='train_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='optimizer', ctx=Load()), attr='minimize', ctx=Load()), args=[Name(id='final_loss', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='global_step', kind=None), Name(id='global_step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='loss', kind=None), Name(id='label_loss', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='predictions', kind=None), Name(id='predictions', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='input_batch_raw', kind=None), Name(id='model_input_raw', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='input_batch', kind=None), Name(id='model_input', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='num_frames', kind=None), Name(id='num_frames', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='labels', kind=None), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='labels_batch', ctx=Load()), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='train_op', kind=None), Name(id='train_op', ctx=Load())], keywords=[]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='train_loop', args=arguments(posonlyargs=[], args=[arg(arg='train_dir', annotation=None, type_comment=None), arg(arg='saver', annotation=None, type_comment=None), arg(arg='is_chief', annotation=None, type_comment=None), arg(arg='master', annotation=None, type_comment=None), arg(arg='start_supervisor_services', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=True, kind=None), Constant(value='', kind=None), Constant(value=True, kind=None)]), body=[Expr(value=Constant(value='Performs training on the currently defined tensorflow graph.\n\n  Args:\n    train_dir: Where to save the model checkpoints.\n    saver: The class to use for serializing the graph variables.\n    is_chief: Whether this worker is the primary worker (which is responsible\n    for writing checkpoints and summaries), or an anonymous member of the flock.\n    master: Which Tensorflow master to listen to.\n    start_supervisor_services: Whether to start threads for writing summaries\n      and checkpoints.\n\n  Returns:\n  A tuple of the training Hit@1 and the training PERR.\n  ', kind=None)), Assign(targets=[Name(id='global_step', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='global_step', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='loss', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='predictions', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='labels', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='labels', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='train_op', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='train_op', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='sv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Supervisor', ctx=Load()), args=[], keywords=[keyword(arg='logdir', value=Name(id='train_dir', ctx=Load())), keyword(arg='is_chief', value=Name(id='is_chief', ctx=Load())), keyword(arg='global_step', value=Name(id='global_step', ctx=Load())), keyword(arg='save_model_secs', value=BinOp(left=Constant(value=15, kind=None), op=Mult(), right=Constant(value=60, kind=None))), keyword(arg='save_summaries_secs', value=Constant(value=120, kind=None)), keyword(arg='saver', value=Name(id='saver', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='sess', ctx=Store())], value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='prepare_or_wait_for_session', ctx=Load()), args=[Name(id='master', ctx=Load())], keywords=[keyword(arg='start_standard_services', value=Name(id='start_supervisor_services', ctx=Load())), keyword(arg='config', value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='ConfigProto', ctx=Load()), args=[], keywords=[keyword(arg='log_device_placement', value=Constant(value=True, kind=None)), keyword(arg='allow_soft_placement', value=Constant(value=True, kind=None))]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='prepared session', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='start_queue_runners', ctx=Load()), args=[Name(id='sess', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='started queue runners', kind=None)], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='entering training loop', kind=None)], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='should_stop', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='batch_start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='global_step_val', ctx=Store()), Name(id='loss_val', ctx=Store()), Name(id='predictions_val', ctx=Store()), Name(id='labels_val', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Name(id='train_op', ctx=Load()), Name(id='global_step', ctx=Load()), Name(id='loss', ctx=Load()), Name(id='predictions', ctx=Load()), Name(id='labels', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='seconds_per_batch', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='batch_start_time', ctx=Load())), type_comment=None), Assign(targets=[Name(id='examples_per_second', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='labels_val', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), op=Div(), right=Name(id='seconds_per_batch', ctx=Load())), type_comment=None), Assign(targets=[Name(id='hit_at_one', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_hit_at_one', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='perr', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_precision_at_equal_recall_rate', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='gap', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_gap', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='training step ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='global_step_val', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='| Hit@1: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='hit_at_one', ctx=Load()))), op=Add(), right=Constant(value=' PERR: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='perr', ctx=Load()))), op=Add(), right=Constant(value=' GAP: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='gap', ctx=Load()))), op=Add(), right=Constant(value=' Loss: ', kind=None)), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='loss_val', ctx=Load())], keywords=[]))], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='is_chief', ctx=Load()), Compare(left=BinOp(left=Name(id='global_step_val', ctx=Load()), op=Mod(), right=Constant(value=10, kind=None)), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), Name(id='train_dir', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_Hit@1', kind=None), Name(id='hit_at_one', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_Perr', kind=None), Name(id='perr', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_GAP', kind=None), Name(id='gap', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='global_step/Examples/Second', kind=None), Name(id='examples_per_second', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='errors', ctx=Load()), attr='OutOfRangeError', ctx=Load()), name=None, body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Done training -- epoch limit reached', kind=None)], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='exited training loop', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='Stop', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Name(id='hit_at_one', ctx=Load()), Name(id='perr', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='unused_argv', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='tensorflow version: %s', kind=None), op=Mod(), right=Attribute(value=Name(id='tf', ctx=Load()), attr='__version__', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='is_chief', ctx=Store())], value=Compare(left=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='task', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), type_comment=None), Assign(targets=[Name(id='saver', ctx=Store())], value=Constant(value=None, kind=None), type_comment=None), Assign(targets=[Name(id='latest_checkpoint', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='latest_checkpoint', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())], keywords=[]), type_comment=None), If(test=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='start_new_model', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value=""'start_new_model' flag is set. Removing existing train dir."", kind=None)], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='DeleteRecursively', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=None, name=None, body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='error', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value='Failed to delete directory ', kind=None), op=Add(), right=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())), op=Add(), right=Constant(value=' when starting a new model. Please delete it manually and', kind=None)), op=Add(), right=Constant(value=' try again.', kind=None))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='latest_checkpoint', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='No checkpoint file found. Building a new model.', kind=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='meta_filename', ctx=Store())], value=BinOp(left=Name(id='latest_checkpoint', ctx=Load()), op=Add(), right=Constant(value='.meta', kind=None)), type_comment=None), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='Exists', ctx=Load()), args=[Name(id='meta_filename', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='No meta graph file found. Building a new model.', kind=None)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Restoring from meta graph file %s', kind=None), Name(id='meta_filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='import_meta_graph', ctx=Load()), args=[Name(id='meta_filename', ctx=Load())], keywords=[]), type_comment=None)])])]), If(test=UnaryOp(op=Not(), operand=Name(id='saver', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='feature_names', ctx=Store()), Name(id='feature_sizes', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='GetListOfFeatureNamesAndSizes', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='feature_names', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='feature_sizes', ctx=Load())], keywords=[]), type_comment=None), If(test=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='frame_features', ctx=Load()), body=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='YT8MFrameFeatureReader', ctx=Load()), args=[], keywords=[keyword(arg='feature_names', value=Name(id='feature_names', ctx=Load())), keyword(arg='feature_sizes', value=Name(id='feature_sizes', ctx=Load()))]), type_comment=None)], orelse=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='YT8MAggregatedFeatureReader', ctx=Load()), args=[], keywords=[keyword(arg='feature_names', value=Name(id='feature_names', ctx=Load())), keyword(arg='feature_sizes', value=Name(id='feature_sizes', ctx=Load()))]), type_comment=None)]), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='model', ctx=Load()), List(elts=[Name(id='frame_level_models', ctx=Load()), Name(id='video_level_models', ctx=Load())], ctx=Load())], keywords=[]), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='label_loss_fn', ctx=Store())], value=Call(func=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='label_loss', ctx=Load()), List(elts=[Name(id='losses', ctx=Load())], ctx=Load())], keywords=[]), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='optimizer_class', ctx=Store())], value=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='optimizer', ctx=Load()), List(elts=[Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Name(id='build_graph', ctx=Load()), args=[], keywords=[keyword(arg='reader', value=Name(id='reader', ctx=Load())), keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='optimizer_class', value=Name(id='optimizer_class', ctx=Load())), keyword(arg='train_data_pattern', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_data_pattern', ctx=Load())), keyword(arg='label_loss_fn', value=Name(id='label_loss_fn', ctx=Load())), keyword(arg='base_learning_rate', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='base_learning_rate', ctx=Load())), keyword(arg='regularization_penalty', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='regularization_penalty', ctx=Load())), keyword(arg='num_readers', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='num_readers', ctx=Load())), keyword(arg='batch_size', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='built graph', kind=None)], keywords=[])), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[keyword(arg='max_to_keep', value=Constant(value=0, kind=None)), keyword(arg='keep_checkpoint_every_n_hours', value=Constant(value=0.25, kind=None))]), type_comment=None)], orelse=[]), Expr(value=Call(func=Name(id='train_loop', ctx=Load()), args=[], keywords=[keyword(arg='is_chief', value=Name(id='is_chief', ctx=Load())), keyword(arg='train_dir', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())), keyword(arg='saver', value=Name(id='saver', ctx=Load())), keyword(arg='master', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='master', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__', kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])","Module(body=[Expr(value=Constant(value='Binary for training Tensorflow models on the YouTube-8M dataset.', kind=None)), Import(names=[alias(name='time', asname=None)]), Import(names=[alias(name='eval_util', asname=None)]), Import(names=[alias(name='losses', asname=None)]), Import(names=[alias(name='frame_level_models', asname=None)]), Import(names=[alias(name='video_level_models', asname=None)]), Import(names=[alias(name='readers', asname=None)]), Import(names=[alias(name='tensorflow', asname='tf')]), Import(names=[alias(name='tensorflow.contrib.slim', asname='slim')]), ImportFrom(module='tensorflow', names=[alias(name='app', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='flags', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='gfile', asname=None)], level=0), ImportFrom(module='tensorflow', names=[alias(name='logging', asname=None)], level=0), Import(names=[alias(name='utils', asname=None)]), Assign(targets=[Name(id='FLAGS', ctx=Store())], value=Attribute(value=Name(id='flags', ctx=Load()), attr='FLAGS', ctx=Load()), type_comment=None), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__', kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='train_dir', kind=None), Constant(value='/tmp/yt8m_model/', kind=None), Constant(value='The directory to save the model files in.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='train_data_pattern', kind=None), Constant(value='', kind=None), Constant(value=""File glob for the training dataset. If the files refer to Frame Level features (i.e. tensorflow.SequenceExample), then set --reader_type format. The (Sequence)Examples are expected to have 'rgb' byte array sequence feature as well as a 'labels' int64 context feature."", kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='feature_names', kind=None), Constant(value='mean_rgb', kind=None), Constant(value='Name of the feature to use for training.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='feature_sizes', kind=None), Constant(value='1024', kind=None), Constant(value='Length of the feature vectors.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='frame_features', kind=None), Constant(value=False, kind=None), Constant(value='If set, then --train_data_pattern must be frame-level features. Otherwise, --train_data_pattern must be aggregated video-level features. The model must also be set appropriately (i.e. to read 3D batches VS 4D batches.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='model', kind=None), Constant(value='LogisticModel', kind=None), Constant(value='Which architecture to use for the model. Models are defined in models.py.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_bool', ctx=Load()), args=[Constant(value='start_new_model', kind=None), Constant(value=False, kind=None), Constant(value='If set, this will not resume from a checkpoint and will instead create a new model instance.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='batch_size', kind=None), Constant(value=1024, kind=None), Constant(value='How many examples to process per batch for training.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='label_loss', kind=None), Constant(value='CrossEntropyLoss', kind=None), Constant(value='Which loss function to use for training the model.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_float', ctx=Load()), args=[Constant(value='regularization_penalty', kind=None), Constant(value=1, kind=None), Constant(value='How much weight to give to the regularization loss (the label loss has a weight of 1).', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_float', ctx=Load()), args=[Constant(value='base_learning_rate', kind=None), Constant(value=0.01, kind=None), Constant(value='Which learning rate to start with.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='num_readers', kind=None), Constant(value=8, kind=None), Constant(value='How many threads to use for reading input files.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='master', kind=None), Constant(value='', kind=None), Constant(value='TensorFlow master to use.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='task', kind=None), Constant(value=0, kind=None), Constant(value='Task id of the replica running the training. 0 implies chief Supervisor.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_integer', ctx=Load()), args=[Constant(value='ps_tasks', kind=None), Constant(value=0, kind=None), Constant(value='Number of tasks in the ps job.\n                       If 0 no ps job is used.', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='DEFINE_string', ctx=Load()), args=[Constant(value='optimizer', kind=None), Constant(value='AdamOptimizer', kind=None), Constant(value='What optimizer class to use.', kind=None)], keywords=[]))], orelse=[]), FunctionDef(name='validate_class_name', args=arguments(posonlyargs=[], args=[arg(arg='flag_value', annotation=None, type_comment=None), arg(arg='category', annotation=None, type_comment=None), arg(arg='modules', annotation=None, type_comment=None), arg(arg='expected_superclass', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value=""Checks that the given string matches a class of the expected type.\n\n  Args:\n    flag_value: A string naming the class to instantiate.\n    category: A string used further describe the class in error messages\n              (e.g. 'model', 'reader', 'loss').\n    modules: A list of modules to search for the given class.\n    expected_superclass: A class that the given class should inherit from.\n\n  Raises:\n    FlagsError: If the given class could not be found or if the first class\n    found with that name doesn't inherit from the expected superclass.\n\n  Returns:\n    True if a class was found that matches the given constraints.\n  "", kind=None)), Assign(targets=[Name(id='candidates', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='flag_value', ctx=Load()), Constant(value=None, kind=None)], keywords=[]), generators=[comprehension(target=Name(id='module', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), For(target=Name(id='candidate', ctx=Store()), iter=Name(id='candidates', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='candidate', ctx=Load())), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='expected_superclass', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='FlagsError', ctx=Load()), args=[BinOp(left=Constant(value=""%s '%s' doesn't inherit from %s."", kind=None), op=Mod(), right=Tuple(elts=[Name(id='category', ctx=Load()), Name(id='flag_value', ctx=Load()), Attribute(value=Name(id='expected_superclass', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))], keywords=[]), cause=None)], orelse=[]), Return(value=Constant(value=True, kind=None))], orelse=[], type_comment=None), Raise(exc=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='FlagsError', ctx=Load()), args=[BinOp(left=Constant(value=""Unable to find %s '%s'."", kind=None), op=Mod(), right=Tuple(elts=[Name(id='category', ctx=Load()), Name(id='flag_value', ctx=Load())], ctx=Load()))], keywords=[]), cause=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='get_input_data_tensors', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=None, type_comment=None), arg(arg='data_pattern', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='num_epochs', annotation=None, type_comment=None), arg(arg='num_readers', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=1000, kind=None), Constant(value=None, kind=None), Constant(value=1, kind=None)]), body=[Expr(value=Constant(value=""Creates the section of the graph which reads the training data.\n\n  Args:\n    reader: A class which parses the training data.\n    data_pattern: A 'glob' style path to the data files.\n    batch_size: How many examples to process at a time.\n    num_epochs: How many passes to make over the training data. Set to 'None'\n                to run indefinitely.\n    num_readers: How many I/O threads to use.\n\n  Returns:\n    A tuple containing the features tensor, labels tensor, and optionally a\n    tensor containing the number of frames per video. The exact dimensions\n    depend on the reader being used.\n\n  Raises:\n    IOError: If no files matching the given pattern were found.\n  "", kind=None)), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='Using batch size of ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='batch_size', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=' for training.', kind=None))], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='train_input', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='Glob', ctx=Load()), args=[Name(id='data_pattern', ctx=Load())], keywords=[]), type_comment=None), If(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load())), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=""Unable to find training files. data_pattern='"", kind=None), op=Add(), right=Name(id='data_pattern', ctx=Load())), op=Add(), right=Constant(value=""'"", kind=None))], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='number of training files: ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])), Assign(targets=[Name(id='filename_queue', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='string_input_producer', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[keyword(arg='num_epochs', value=Name(id='num_epochs', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='training_data', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='prepare_reader', ctx=Load()), args=[Name(id='filename_queue', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_readers', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), type_comment=None), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='shuffle_batch_join', ctx=Load()), args=[Name(id='training_data', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='capacity', value=BinOp(left=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load()), op=Mult(), right=Constant(value=5, kind=None))), keyword(arg='min_after_dequeue', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load())), keyword(arg='allow_smaller_final_batch', value=Constant(value=True, kind=None)), keyword(arg='enqueue_many', value=Constant(value=True, kind=None))]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='find_class_by_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=None, type_comment=None), arg(arg='modules', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Constant(value='Searches the provided modules for the named class and returns it.', kind=None)), Assign(targets=[Name(id='modules', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None, kind=None)], keywords=[]), generators=[comprehension(target=Name(id='module', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[], is_async=0)]), type_comment=None), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='modules', ctx=Load()), ifs=[Name(id='a', ctx=Load())], is_async=0)])], keywords=[]))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='build_graph', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=None, type_comment=None), arg(arg='model', annotation=None, type_comment=None), arg(arg='train_data_pattern', annotation=None, type_comment=None), arg(arg='label_loss_fn', annotation=None, type_comment=None), arg(arg='batch_size', annotation=None, type_comment=None), arg(arg='base_learning_rate', annotation=None, type_comment=None), arg(arg='optimizer_class', annotation=None, type_comment=None), arg(arg='regularization_penalty', annotation=None, type_comment=None), arg(arg='num_readers', annotation=None, type_comment=None), arg(arg='num_epochs', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='CrossEntropyLoss', ctx=Load()), args=[], keywords=[]), Constant(value=1000, kind=None), Constant(value=0.01, kind=None), Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='AdamOptimizer', ctx=Load()), Constant(value=1, kind=None), Constant(value=1, kind=None), Constant(value=None, kind=None)]), body=[Expr(value=Constant(value=""Creates the Tensorflow graph.\n\n  This will only be called once in the life of\n  a training model, because after the graph is created the model will be\n  restored from a meta graph file rather than being recreated.\n\n  Args:\n    reader: The data file reader. It should inherit from BaseReader.\n    model: The core model (e.g. logistic or neural net). It should inherit\n           from BaseModel.\n    train_data_pattern: glob path to the training data files.\n    label_loss_fn: What kind of loss to apply to the model. It should inherit\n                from BaseLoss.\n    batch_size: How many examples to process at a time.\n    base_learning_rate: What learning rate to initialize the optimizer with.\n    optimizer_class: Which optimization algorithm to use.\n    regularization_penalty: How much weight to give the regularization loss\n                            compared to the label loss.\n    num_readers: How many threads to use for I/O operations.\n    num_epochs: How many passes to make over the data. 'None' means an\n                unlimited number of passes.\n  "", kind=None)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='device', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='replica_device_setter', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='ps_tasks', ctx=Load())], keywords=[keyword(arg='merge_devices', value=Constant(value=True, kind=None))])], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='global_step', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='Variable', ctx=Load()), args=[Constant(value=0, kind=None)], keywords=[keyword(arg='trainable', value=Constant(value=False, kind=None)), keyword(arg='name', value=Constant(value='global_step', kind=None))]), type_comment=None), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Name(id='optimizer_class', ctx=Load()), args=[Name(id='base_learning_rate', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='unused_video_id', ctx=Store()), Name(id='model_input_raw', ctx=Store()), Name(id='labels_batch', ctx=Store()), Name(id='num_frames', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_input_data_tensors', ctx=Load()), args=[Name(id='reader', ctx=Load()), Name(id='train_data_pattern', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='num_readers', value=Name(id='num_readers', ctx=Load())), keyword(arg='num_epochs', value=Name(id='num_epochs', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Constant(value='model/input_raw', kind=None), Name(id='model_input_raw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_dim', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='model_input_raw', ctx=Load()), attr='get_shape', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Constant(value=1, kind=None)), type_comment=None), Assign(targets=[Name(id='model_input', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='nn', ctx=Load()), attr='l2_normalize', ctx=Load()), args=[Name(id='model_input_raw', ctx=Load()), Name(id='feature_dim', ctx=Load())], keywords=[]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='name_scope', ctx=Load()), args=[Constant(value='model', kind=None)], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='create_model', ctx=Load()), args=[Name(id='model_input', ctx=Load())], keywords=[keyword(arg='num_frames', value=Name(id='num_frames', ctx=Load())), keyword(arg='vocab_size', value=Attribute(value=Name(id='reader', ctx=Load()), attr='num_classes', ctx=Load())), keyword(arg='labels', value=Name(id='labels_batch', ctx=Load()))]), type_comment=None), For(target=Name(id='variable', ctx=Store()), iter=Call(func=Attribute(value=Name(id='slim', ctx=Load()), attr='get_model_variables', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='histogram', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='variable', ctx=Load()), attr='op', ctx=Load()), attr='name', ctx=Load()), Name(id='variable', ctx=Load())], keywords=[]))], orelse=[], type_comment=None), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='predictions', kind=None)), ctx=Load()), type_comment=None), If(test=Compare(left=Constant(value='loss', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='loss', kind=None)), ctx=Load()), type_comment=None)], orelse=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='label_loss_fn', ctx=Load()), attr='calculate_loss', ctx=Load()), args=[Name(id='predictions', ctx=Load()), Name(id='labels_batch', ctx=Load())], keywords=[]), type_comment=None)]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='label_loss', kind=None), Name(id='label_loss', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='regularization_loss', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='reg_loss', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='regularization_loss', kind=None)), ctx=Load()), type_comment=None)], orelse=[Assign(targets=[Name(id='reg_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=0.0, kind=None)], keywords=[]), type_comment=None)]), Assign(targets=[Name(id='reg_losses', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='losses', ctx=Load()), attr='get_regularization_losses', ctx=Load()), args=[], keywords=[]), type_comment=None), If(test=Name(id='reg_losses', ctx=Load()), body=[AugAssign(target=Name(id='reg_loss', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_n', ctx=Load()), args=[Name(id='reg_losses', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='regularization_penalty', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0, kind=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='summary', ctx=Load()), attr='scalar', ctx=Load()), args=[Constant(value='reg_loss', kind=None), Name(id='reg_loss', ctx=Load())], keywords=[]))], orelse=[])], type_comment=None), Assign(targets=[Name(id='update_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='GraphKeys', ctx=Load()), attr='UPDATE_OPS', ctx=Load())], keywords=[]), type_comment=None), If(test=Compare(left=Constant(value='update_ops', kind=None), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[AugAssign(target=Name(id='update_ops', ctx=Store()), op=Add(), value=Subscript(value=Name(id='result', ctx=Load()), slice=Index(value=Constant(value='update_ops', kind=None)), ctx=Load()))], orelse=[]), If(test=Name(id='update_ops', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='control_dependencies', ctx=Load()), args=[Name(id='update_ops', ctx=Load())], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='barrier', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='no_op', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='gradient_barrier', kind=None))]), type_comment=None), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='control_dependencies', ctx=Load()), args=[List(elts=[Name(id='barrier', ctx=Load())], ctx=Load())], keywords=[]), optional_vars=None)], body=[Assign(targets=[Name(id='label_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='identity', ctx=Load()), args=[Name(id='label_loss', ctx=Load())], keywords=[]), type_comment=None)], type_comment=None)], type_comment=None)], orelse=[]), Assign(targets=[Name(id='final_loss', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='regularization_penalty', ctx=Load()), op=Mult(), right=Name(id='reg_loss', ctx=Load())), op=Add(), right=Name(id='label_loss', ctx=Load())), type_comment=None), Assign(targets=[Name(id='train_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='optimizer', ctx=Load()), attr='minimize', ctx=Load()), args=[Name(id='final_loss', ctx=Load())], keywords=[keyword(arg='global_step', value=Name(id='global_step', ctx=Load()))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='global_step', kind=None), Name(id='global_step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='loss', kind=None), Name(id='label_loss', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='predictions', kind=None), Name(id='predictions', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='input_batch_raw', kind=None), Name(id='model_input_raw', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='input_batch', kind=None), Name(id='model_input', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='num_frames', kind=None), Name(id='num_frames', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='labels', kind=None), Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='labels_batch', ctx=Load()), Attribute(value=Name(id='tf', ctx=Load()), attr='float32', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='add_to_collection', ctx=Load()), args=[Constant(value='train_op', kind=None), Name(id='train_op', ctx=Load())], keywords=[]))], type_comment=None)], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='train_loop', args=arguments(posonlyargs=[], args=[arg(arg='train_dir', annotation=None, type_comment=None), arg(arg='saver', annotation=None, type_comment=None), arg(arg='is_chief', annotation=None, type_comment=None), arg(arg='master', annotation=None, type_comment=None), arg(arg='start_supervisor_services', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Constant(value=None, kind=None), Constant(value=None, kind=None), Constant(value=True, kind=None), Constant(value='', kind=None), Constant(value=True, kind=None)]), body=[Expr(value=Constant(value='Performs training on the currently defined tensorflow graph.\n\n  Args:\n    train_dir: Where to save the model checkpoints.\n    saver: The class to use for serializing the graph variables.\n    is_chief: Whether this worker is the primary worker (which is responsible\n    for writing checkpoints and summaries), or an anonymous member of the flock.\n    master: Which Tensorflow master to listen to.\n    start_supervisor_services: Whether to start threads for writing summaries\n      and checkpoints.\n\n  Returns:\n  A tuple of the training Hit@1 and the training PERR.\n  ', kind=None)), Assign(targets=[Name(id='global_step', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='global_step', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='loss', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='loss', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='predictions', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='labels', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='labels', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='train_op', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='get_collection', ctx=Load()), args=[Constant(value='train_op', kind=None)], keywords=[]), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), type_comment=None), Assign(targets=[Name(id='sv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Supervisor', ctx=Load()), args=[], keywords=[keyword(arg='logdir', value=Name(id='train_dir', ctx=Load())), keyword(arg='is_chief', value=Name(id='is_chief', ctx=Load())), keyword(arg='global_step', value=Name(id='global_step', ctx=Load())), keyword(arg='save_model_secs', value=BinOp(left=Constant(value=15, kind=None), op=Mult(), right=Constant(value=60, kind=None))), keyword(arg='save_summaries_secs', value=Constant(value=120, kind=None)), keyword(arg='saver', value=Name(id='saver', ctx=Load()))]), type_comment=None), Assign(targets=[Name(id='sess', ctx=Store())], value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='prepare_or_wait_for_session', ctx=Load()), args=[Name(id='master', ctx=Load())], keywords=[keyword(arg='start_standard_services', value=Name(id='start_supervisor_services', ctx=Load())), keyword(arg='config', value=Call(func=Attribute(value=Name(id='tf', ctx=Load()), attr='ConfigProto', ctx=Load()), args=[], keywords=[keyword(arg='log_device_placement', value=Constant(value=True, kind=None)), keyword(arg='allow_soft_placement', value=Constant(value=True, kind=None))]))]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='prepared session', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='start_queue_runners', ctx=Load()), args=[Name(id='sess', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='started queue runners', kind=None)], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='entering training loop', kind=None)], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='should_stop', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='batch_start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), type_comment=None), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='global_step_val', ctx=Store()), Name(id='loss_val', ctx=Store()), Name(id='predictions_val', ctx=Store()), Name(id='labels_val', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Name(id='train_op', ctx=Load()), Name(id='global_step', ctx=Load()), Name(id='loss', ctx=Load()), Name(id='predictions', ctx=Load()), Name(id='labels', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='seconds_per_batch', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='batch_start_time', ctx=Load())), type_comment=None), Assign(targets=[Name(id='examples_per_second', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='labels_val', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Constant(value=0, kind=None)), ctx=Load()), op=Div(), right=Name(id='seconds_per_batch', ctx=Load())), type_comment=None), Assign(targets=[Name(id='hit_at_one', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_hit_at_one', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='perr', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_precision_at_equal_recall_rate', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Assign(targets=[Name(id='gap', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_util', ctx=Load()), attr='calculate_gap', ctx=Load()), args=[Name(id='predictions_val', ctx=Load()), Name(id='labels_val', ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='training step ', kind=None), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='global_step_val', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='| Hit@1: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='hit_at_one', ctx=Load()))), op=Add(), right=Constant(value=' PERR: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='perr', ctx=Load()))), op=Add(), right=Constant(value=' GAP: ', kind=None)), op=Add(), right=BinOp(left=Constant(value='%.2f', kind=None), op=Mod(), right=Name(id='gap', ctx=Load()))), op=Add(), right=Constant(value=' Loss: ', kind=None)), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='loss_val', ctx=Load())], keywords=[]))], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='is_chief', ctx=Load()), Compare(left=BinOp(left=Name(id='global_step_val', ctx=Load()), op=Mod(), right=Constant(value=10, kind=None)), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), Name(id='train_dir', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_Hit@1', kind=None), Name(id='hit_at_one', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_Perr', kind=None), Name(id='perr', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='model/Training_GAP', kind=None), Name(id='gap', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='add_summary', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='MakeSummary', ctx=Load()), args=[Constant(value='global_step/Examples/Second', kind=None), Name(id='examples_per_second', ctx=Load())], keywords=[]), Name(id='global_step_val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sv', ctx=Load()), attr='summary_writer', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='errors', ctx=Load()), attr='OutOfRangeError', ctx=Load()), name=None, body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Done training -- epoch limit reached', kind=None)], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='exited training loop', kind=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='Stop', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Name(id='hit_at_one', ctx=Load()), Name(id='perr', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None, type_comment=None), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='unused_argv', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='tensorflow version: %s', kind=None), op=Mod(), right=Attribute(value=Name(id='tf', ctx=Load()), attr='__version__', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='is_chief', ctx=Store())], value=Compare(left=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='task', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0, kind=None)]), type_comment=None), Assign(targets=[Name(id='saver', ctx=Store())], value=Constant(value=None, kind=None), type_comment=None), Assign(targets=[Name(id='latest_checkpoint', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='latest_checkpoint', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())], keywords=[]), type_comment=None), If(test=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='start_new_model', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value=""'start_new_model' flag is set. Removing existing train dir."", kind=None)], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='DeleteRecursively', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=None, name=None, body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='error', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value='Failed to delete directory ', kind=None), op=Add(), right=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())), op=Add(), right=Constant(value=' when starting a new model. Please delete it manually and', kind=None)), op=Add(), right=Constant(value=' try again.', kind=None))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='latest_checkpoint', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='No checkpoint file found. Building a new model.', kind=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='meta_filename', ctx=Store())], value=BinOp(left=Name(id='latest_checkpoint', ctx=Load()), op=Add(), right=Constant(value='.meta', kind=None)), type_comment=None), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='gfile', ctx=Load()), attr='Exists', ctx=Load()), args=[Name(id='meta_filename', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='No meta graph file found. Building a new model.', kind=None)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Restoring from meta graph file %s', kind=None), Name(id='meta_filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='import_meta_graph', ctx=Load()), args=[Name(id='meta_filename', ctx=Load())], keywords=[]), type_comment=None)])])]), If(test=UnaryOp(op=Not(), operand=Name(id='saver', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='feature_names', ctx=Store()), Name(id='feature_sizes', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='GetListOfFeatureNamesAndSizes', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='feature_names', ctx=Load()), Attribute(value=Name(id='FLAGS', ctx=Load()), attr='feature_sizes', ctx=Load())], keywords=[]), type_comment=None), If(test=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='frame_features', ctx=Load()), body=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='YT8MFrameFeatureReader', ctx=Load()), args=[], keywords=[keyword(arg='feature_names', value=Name(id='feature_names', ctx=Load())), keyword(arg='feature_sizes', value=Name(id='feature_sizes', ctx=Load()))]), type_comment=None)], orelse=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='YT8MAggregatedFeatureReader', ctx=Load()), args=[], keywords=[keyword(arg='feature_names', value=Name(id='feature_names', ctx=Load())), keyword(arg='feature_sizes', value=Name(id='feature_sizes', ctx=Load()))]), type_comment=None)]), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='model', ctx=Load()), List(elts=[Name(id='frame_level_models', ctx=Load()), Name(id='video_level_models', ctx=Load())], ctx=Load())], keywords=[]), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='label_loss_fn', ctx=Store())], value=Call(func=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='label_loss', ctx=Load()), List(elts=[Name(id='losses', ctx=Load())], ctx=Load())], keywords=[]), args=[], keywords=[]), type_comment=None), Assign(targets=[Name(id='optimizer_class', ctx=Store())], value=Call(func=Name(id='find_class_by_name', ctx=Load()), args=[Attribute(value=Name(id='FLAGS', ctx=Load()), attr='optimizer', ctx=Load()), List(elts=[Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load())], ctx=Load())], keywords=[]), type_comment=None), Expr(value=Call(func=Name(id='build_graph', ctx=Load()), args=[], keywords=[keyword(arg='reader', value=Name(id='reader', ctx=Load())), keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='optimizer_class', value=Name(id='optimizer_class', ctx=Load())), keyword(arg='train_data_pattern', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_data_pattern', ctx=Load())), keyword(arg='label_loss_fn', value=Name(id='label_loss_fn', ctx=Load())), keyword(arg='base_learning_rate', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='base_learning_rate', ctx=Load())), keyword(arg='regularization_penalty', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='regularization_penalty', ctx=Load())), keyword(arg='num_readers', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='num_readers', ctx=Load())), keyword(arg='batch_size', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='batch_size', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='built graph', kind=None)], keywords=[])), Assign(targets=[Name(id='saver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tf', ctx=Load()), attr='train', ctx=Load()), attr='Saver', ctx=Load()), args=[], keywords=[keyword(arg='max_to_keep', value=Constant(value=0, kind=None)), keyword(arg='keep_checkpoint_every_n_hours', value=Constant(value=0.25, kind=None))]), type_comment=None)], orelse=[]), Expr(value=Call(func=Name(id='train_loop', ctx=Load()), args=[], keywords=[keyword(arg='is_chief', value=Name(id='is_chief', ctx=Load())), keyword(arg='train_dir', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='train_dir', ctx=Load())), keyword(arg='saver', value=Name(id='saver', ctx=Load())), keyword(arg='master', value=Attribute(value=Name(id='FLAGS', ctx=Load()), attr='master', ctx=Load()))]))], decorator_list=[], returns=None, type_comment=None), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__', kind=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])"
